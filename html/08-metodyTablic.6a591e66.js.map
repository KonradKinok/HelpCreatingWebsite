{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_array_without_holes.js","node_modules/@swc/helpers/lib/_array_like_to_array.js","node_modules/@swc/helpers/lib/_iterable_to_array.js","node_modules/@swc/helpers/lib/_non_iterable_spread.js","node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/lib/_to_consumable_array.js","src/scripts/08.mjs"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayWithoutHoles;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return (0, _arrayLikeToArray).default(arr);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayLikeToArray;\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _iterableToArray;\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _nonIterableSpread;\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _unsupportedIterableToArray;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, _arrayLikeToArray).default(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArray).default(o, minLen);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _toConsumableArray;\nvar _arrayWithoutHoles = _interopRequireDefault(require(\"./_array_without_holes\"));\nvar _iterableToArray = _interopRequireDefault(require(\"./_iterable_to_array\"));\nvar _nonIterableSpread = _interopRequireDefault(require(\"./_non_iterable_spread\"));\nvar _unsupportedIterableToArray = _interopRequireDefault(require(\"./_unsupported_iterable_to_array\"));\nfunction _toConsumableArray(arr) {\n    return (0, _arrayWithoutHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _unsupportedIterableToArray).default(arr) || (0, _nonIterableSpread).default();\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","'use strict';\n\n// const planets = ['Ziemia', 'Mars', 'Wenus', 'Jowisz'];\n\n// const planetsInUpperCase = planets.map(planet => planet.toUpperCase());\n// console.log(planetsInUpperCase); // ['ZIEMIA', 'MARS', 'WENUS', 'JOWISZ']\n\n// const planetsInLowerCase = planets.map(planet => planet.toLowerCase());\n// console.log(planetsInLowerCase); // ['ziemia', 'mars', 'wenus', 'jowisz']\n\n// // Oryginalna tablica się nie zmieniła\n// console.log(planets); // ['Ziemia', 'Mars', 'Wenus', 'Jowisz']\n\n// Filtrowanie unikalnych elementów\nconst students = [\n  { name: 'Mango', courses: ['matematyka', 'fizyka'] },\n  { name: 'Poly', courses: ['informatyka', 'matematyka'] },\n  { name: 'Kiwi', courses: ['fizyka', 'biologia'] },\n];\n\nconst allCourses = students.flatMap(student => student.courses);\n// ['matematyka', 'fizyka', 'informatyka', 'matematyka', 'fizyka', 'biologia'];\n\nconst uniqueCourses = allCourses.filter(\n  (course, index, array) => array.indexOf(course) === index\n);\n\n// console.log(uniqueCourses);\n\n// Metoda find()\nconst colorPickerOptions = [\n  { label: 'red', color: '#F44336' },\n  { label: 'green', color: '#4CAF50' },\n  { label: 'blue', color: '#2196F3' },\n  { label: 'pink', color: '#E91E63' },\n  { label: 'indigo', color: '#3F51B5' },\n];\n\nconst foundColor = colorPickerOptions.find(option => option.label === 'blue'); // { label: 'blue', color: '#2196F3' }\n// console.log(\n//   `Obiekt: ${foundColor} Nazwa koloru: ${foundColor.label} Hash koloru: ${foundColor.color}`\n// );\n\n// 01. Funkcja do zmiennej\nfunction makePizza() {\n  return 'Your pizza is being prepared, please wait.';\n}\n\nconst result = makePizza();\nconst pointer = makePizza;\n\n//02. Funkcja zwrotna (callback)\nfunction deliverPizza(pizzaName) {\n  return `Delivering ${pizzaName} pizza.`;\n}\n\nfunction makePizza02(pizzaName) {\n  return `Pizza ${pizzaName} is being prepared, please wait...`;\n}\n\n// Chande code below this line\nfunction makeMessage(pizzaName, callback) {\n  return callback(pizzaName);\n}\n\n// console.log(makeMessage('Royal Grand', makePizza02));\n\n//03. Funkcja callback zadeklarowana bezpośrednio przy wywołaniu funkcji\nfunction makePizza03(pizzaName, callback) {\n  console.log(`Pizza ${pizzaName} is being prepared, please wait...`);\n  callback(pizzaName);\n}\n\n// makePizza03('Royal Grand', function deliverPizza(pizzaName) {\n//   console.log(`Delivering pizza ${pizzaName}.`);\n// });\n\n// makePizza03('Ultracheese', function eatPizza(pizzaName) {\n//   console.log(`Eating pizza ${pizzaName}.`);\n// });\n\n//04. Funkcja callback dowolna ilość callbacków\nconst pizzaPalace = {\n  pizzas: ['Ultracheese', 'Smoked', 'Four meats'],\n  order(pizzaName, onSuccess, onError) {\n    const nameOfPizza = this.pizzas.some(tableItem => tableItem === pizzaName);\n\n    if (nameOfPizza) {\n      return onSuccess(pizzaName);\n    } else {\n      return onError(\n        `There is no pizza with a name ${pizzaName} in the assortment.`\n      );\n    }\n  },\n};\n\n// Callback for onSuccess\nfunction makePizza04(pizzaName) {\n  return `Your order is accepted. Cooking pizza ${pizzaName}.`;\n}\n\n// Callback for onError\nfunction onOrderError(error) {\n  return `Error! ${error}`;\n}\n\n// Method calls with callbacks\n// console.log(pizzaPalace.order('Smoked', makePizza04, onOrderError));\n// console.log(pizzaPalace.order('Vienna', makePizza, onOrderError));\n\n//05. Pętla forEach\nfunction calculateTotalPrice(orderedItems) {\n  let totalPrice = 0;\n\n  orderedItems.forEach(function (number) {\n    totalPrice += number;\n  });\n\n  return totalPrice;\n}\n// console.log(calculateTotalPrice([12, 85, 37, 4]));\n\n//06. Pętla forEach - filtrowanie danych\nfunction filterArray(numbers, value) {\n  const filteredNumbers = [];\n\n  numbers.forEach(function (number) {\n    if (number > value) {\n      filteredNumbers.push(number);\n    }\n  });\n\n  return filteredNumbers;\n}\n// console.log(filterArray([1, 2, 3, 4, 5], 3));\n\n//07. Pętla forEach - filtrowanie danych\nfunction getCommonElements(firstArray, secondArray) {\n  const commonElements = [];\n  firstArray.forEach(function (number) {\n    if (secondArray.includes(number)) {\n      commonElements.push(number);\n    }\n  });\n  return commonElements;\n}\n// console.log(getCommonElements([24, 12, 27, 3], [12, 8, 3, 36, 27]));\n\n//08. Funkcja strzałkowa\nconst calculateTotalPrice08 = (quantity, pricePerItem) => {\n  return quantity * pricePerItem;\n};\n\n//09. Funkcja strzałkowa - niejawny zwrot\nconst calculateTotalPrice09 = (quantity, pricePerItem) =>\n  quantity * pricePerItem;\n\n//10. Funkcja strzałkowa - metoda foreach\nconst calculateTotalPrice10 = orderedItems => {\n  let totalPrice = 0;\n\n  orderedItems.forEach(item => {\n    totalPrice += item;\n  });\n\n  return totalPrice;\n};\n// console.log(calculateTotalPrice10([412, 371, 94, 63, 176]));\n\n//11. Funkcja strzałkowa - Filtrowanie tablicy liczb\nconst filterArray11 = (numbers, value) => {\n  const filteredNumbers = [];\n\n  numbers.forEach(number => {\n    if (number > value) {\n      filteredNumbers.push(number);\n    }\n  });\n\n  return filteredNumbers;\n};\n// console.log(filterArray11([12, 24, 8, 41, 76], 38));\n\n//12. Funkcja strzałkowa - Wspólne elementy\nconst getCommonElements12 = (firstArray, secondArray) => {\n  const commonElements = [];\n\n  firstArray.forEach(element => {\n    if (secondArray.includes(element)) {\n      commonElements.push(element);\n    }\n  });\n\n  return commonElements;\n};\n// console.log(getCommonElements12([10, 20, 30, 40], [4, 30, 17, 10, 40]));\n\n//13. Funkcja z efektami ubocznymi\nfunction changeEven(numbers, value) {\n  // Change code below this line\n  const commonElements = [];\n\n  numbers.forEach(element => {\n    if (element % 2 === 0) {\n      commonElements.push(element + value);\n    } else {\n      commonElements.push(element);\n    }\n  });\n  return commonElements;\n}\n// console.log(changeEven([2, 8, 3, 7, 4, 6], 10)); //[12, 18, 3, 7, 14, 16]\n\n//14. Metoda map().\nconst planets = ['Earth', 'Mars', 'Venus', 'Jupiter'];\n\nconst planetsLengths = planets.map(planet => planet.length);\n// console.log(planetsLengths);\n\n//15. Metoda map().\nconst books = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    rating: 8.38,\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    rating: 8.51,\n  },\n  {\n    title: 'The Dream of a Ridiculous Man',\n    author: 'Fyodor Dostoevsky',\n    rating: 7.75,\n  },\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\n  { title: 'Enemy of God', author: 'Bernard Cornwell', rating: 8.67 },\n];\n// Change code below this line\n\nconst titles = books.map(book => book.title);\n// console.log(titles);\n\n//16. Metoda flatMap().\nconst books16 = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    genres: ['adventure', 'history'],\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    genres: ['fiction'],\n  },\n  {\n    title: 'Redder Than Blood',\n    author: 'Tanith Lee',\n    genres: ['horror', 'mysticism'],\n  },\n];\n\nconst genres = books16.flatMap(book => book.genres);\n// console.log(genres);\n\n//17. 18. Metoda map() 22. 23. 24.Metoda filter() 25. Metoda flatMap() filter() 26. 27. Metoda filter() 29. Metoda find() 31. Metoda every() 33. Metoda some() 36. 37. Metoda reduce(callback, initialValue) - obiekt 42.43.44 Metoda sort()obiekt 46. Metoda .filter.map.sort()\nconst users = [\n  {\n    name: 'Moore Hensley',\n    email: 'moorehensley@indexia.com',\n    eyeColor: 'blue',\n    friends: ['Sharron Pace'],\n    isActive: false,\n    balance: 2811,\n    skills: ['ipsum', 'lorem'],\n    gender: 'male',\n    age: 37,\n  },\n  {\n    name: 'Sharlene Bush',\n    email: 'sharlenebush@tubesys.com',\n    eyeColor: 'blue',\n    friends: ['Briana Decker', 'Sharron Pace'],\n    isActive: true,\n    balance: 3821,\n    skills: ['tempor', 'mollit', 'commodo', 'veniam', 'laborum'],\n    gender: 'female',\n    age: 34,\n  },\n  {\n    name: 'Ross Vazquez',\n    email: 'rossvazquez@xinware.com',\n    eyeColor: 'green',\n    friends: ['Marilyn Mcintosh', 'Padilla Garrison', 'Naomi Buckner'],\n    isActive: false,\n    balance: 3793,\n    skills: ['nulla', 'anim', 'proident', 'ipsum', 'elit'],\n    gender: 'male',\n    age: 24,\n  },\n  {\n    name: 'Elma Head',\n    email: 'elmahead@omatom.com',\n    eyeColor: 'green',\n    friends: ['Goldie Gentry', 'Aisha Tran'],\n    isActive: true,\n    balance: 2278,\n    skills: ['adipisicing', 'irure', 'velit'],\n    gender: 'female',\n    age: 21,\n  },\n  {\n    name: 'Carey Barr',\n    email: 'careybarr@nurali.com',\n    eyeColor: 'blue',\n    friends: ['Jordan Sampson', 'Eddie Strong'],\n    isActive: true,\n    balance: 3951,\n    skills: ['ex', 'culpa', 'nostrud'],\n    gender: 'male',\n    age: 27,\n  },\n  {\n    name: 'Blackburn Dotson',\n    email: 'blackburndotson@furnigeer.com',\n    eyeColor: 'brown',\n    friends: ['Jacklyn Lucas', 'Linda Chapman'],\n    isActive: false,\n    balance: 1498,\n    skills: ['non', 'amet', 'ipsum'],\n    gender: 'male',\n    age: 38,\n  },\n  {\n    name: 'Sheree Anthony',\n    email: 'shereeanthony@kog.com',\n    eyeColor: 'brown',\n    friends: ['Goldie Gentry', 'Briana Decker'],\n    isActive: true,\n    balance: 2764,\n    skills: ['lorem', 'veniam', 'culpa'],\n    gender: 'female',\n    age: 39,\n  },\n];\n\n//17. Metoda map().\nconst getUserNames = users => {\n  const usersName = users.map(user => user.name);\n  return usersName;\n};\n\n// console.log(getUserNames(users));\n\n//18. Metoda map().\nconst getUserEmails = users => {\n  const usersEmails = users.map(user => user.email);\n  return usersEmails;\n};\n\n// console.log(getUserEmails(users));\n\n//19. Metoda filter().\nconst numbers = [17, 24, 82, 61, 36, 18, 47, 52, 73];\n// Change code below this line\n\nconst evenNumbers = numbers.filter(value => value % 2 === 0);\nconst oddNumbers = numbers.filter(value => value % 2 !== 0);\n\n// console.log(evenNumbers, oddNumbers);\n\n//20. Metoda flatMap() filter().\nconst books20 = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    genres: ['adventure', 'history'],\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    genres: ['fiction', 'mysticism'],\n  },\n  {\n    title: 'Redder Than Blood',\n    author: 'Tanith Lee',\n    genres: ['horror', 'mysticism', 'adventure'],\n  },\n];\nconst allGenres = books20.flatMap(book => book.genres);\nconst uniqueGenres = allGenres.filter(\n  (genre, index, array) => array.indexOf(genre) === index\n);\n// console.log(allGenres, uniqueGenres);\n\n//21. Metoda filter().\nconst books21 = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    rating: 8.38,\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    rating: 8.51,\n  },\n  {\n    title: 'The Dream of a Ridiculous Man',\n    author: 'Fyodor Dostoevsky',\n    rating: 7.75,\n  },\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\n  { title: 'Enemy of God', author: 'Bernard Cornwell', rating: 8.67 },\n];\n\nconst MIN_RATING = 8;\nconst AUTHOR = 'Bernard Cornwell';\n\nconst topRatedBooks = books21.filter(value => value.rating >= MIN_RATING);\nconst booksByAuthor = books21.filter(value => value.author === AUTHOR);\n\n// console.log(topRatedBooks, booksByAuthor);\n\n// 22. Metoda filter()\nconst getUsersWithEyeColor = (users, color) => {\n  const usersEyes = users.filter(user => user.eyeColor === color);\n  return usersEyes;\n};\n\n// console.log(getUsersWithEyeColor(users, 'blue'));\n\n// 23. Metoda filter()\nconst getUsersWithAge = (users, minAge, maxAge) => {\n  const usersAge = users.filter(({ age }) => age >= minAge && age <= maxAge);\n  return usersAge;\n};\n// console.log(getUsersWithAge(users, 30, 40)); //Moore Hensley, Sharlene Bush, Blackburn Dotson, Sheree Anthony\n\n// 24. Metoda filter()\nconst getUsersWithFriend = (users, friendName) => {\n  const friends = users.filter(({ friends }) => friends.includes(friendName));\n  return friends;\n};\n// console.log(getUsersWithFriend(users, 'Goldie Gentry')); //Elma Head i Sheree Anthony\n\n// 25. Metoda flatMap() filter()\nconst getFriends = users => {\n  const uniqueFriends = users\n    .flatMap(users => users.friends)\n    .filter((friends, index, array) => array.indexOf(friends) === index);\n  return uniqueFriends;\n};\n// console.log(getFriends(users));\n\n// 26. Metoda filter()\nconst getActiveUsers = users => {\n  const activeUsers = users.filter(({ isActive }) => isActive === true);\n  return activeUsers;\n};\n// console.log(getActiveUsers(users));\n\n// 27. Metoda filter()\nconst getInactiveUsers = users => {\n  const inactiveUsers = users.filter(({ isActive }) => isActive === false);\n  return inactiveUsers;\n};\n// console.log(getInactiveUsers(users));\n\n// 28. Metoda find()\nconst books28 = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    rating: 8.38,\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    rating: 8.51,\n  },\n  {\n    title: 'The Dream of a Ridiculous Man',\n    author: 'Fyodor Dostoevsky',\n    rating: 7.75,\n  },\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\n];\nconst BOOK_TITLE = 'The Dream of a Ridiculous Man';\nconst AUTHOR28 = 'Robert Sheckley';\n\nconst bookWithTitle = books28.find(({ title }) => title === BOOK_TITLE);\nconst bookByAuthor = books28.find(book => book.author === AUTHOR28);\n// console.log(bookWithTitle, bookByAuthor);\n\n// 29. Metoda find()\nconst getUserWithEmail = (users, email) => {\n  const userEmail = users.find(user => user.email === email);\n  return userEmail;\n};\n// console.log(getUserWithEmail(users, 'shereeanthony@kog.com'));\n\n// 30. Metoda every()\n// const firstArray = [26, 94, 36, 18];\n// const secondArray = [17, 61, 23];\n// const thirdArray = [17, 26, 94, 61, 36, 23, 18];\n\n// const eachElementInFirstIsEven = firstArray.every(value => value % 2 === 0);\n// const eachElementInFirstIsOdd = firstArray.every(value => value % 2 !== 0);\n\n// const eachElementInSecondIsEven = secondArray.every(value => value % 2 === 0);\n// const eachElementInSecondIsOdd = secondArray.every(value => value % 2 !== 0);\n\n// const eachElementInThirdIsEven = thirdArray.every(value => value % 2 === 0);\n// const eachElementInThirdIsOdd = thirdArray.every(value => value % 2 !== 0);\n\n// console.log(\n//   eachElementInFirstIsEven,\n//   eachElementInFirstIsOdd,\n//   eachElementInSecondIsEven,\n//   eachElementInSecondIsOdd,\n//   eachElementInThirdIsEven,\n//   eachElementInThirdIsOdd\n// );\n\n// 31. Metoda every()\nconst isEveryUserActive = users => {\n  const isAllUsersActive = users.every(user => user.isActive === true);\n  return isAllUsersActive;\n};\n// console.log(isEveryUserActive(users));\n\n// 32. Metoda some()\nconst firstArray = [26, 94, 36, 18];\nconst secondArray = [17, 61, 23];\nconst thirdArray = [17, 26, 94, 61, 36, 23, 18];\n\nconst anyElementInFirstIsEven = firstArray.some(value => value % 2 === 0);\nconst anyElementInFirstIsOdd = firstArray.some(value => value % 2 !== 0);\n\nconst anyElementInSecondIsEven = secondArray.some(value => value % 2 === 0);\nconst anyElementInSecondIsOdd = secondArray.some(value => value % 2 !== 0);\n\nconst anyElementInThirdIsEven = thirdArray.some(value => value % 2 === 0);\nconst anyElementInThirdIsOdd = thirdArray.some(value => value % 2 !== 0);\n\n// console.log(\n//   anyElementInFirstIsEven,\n//   anyElementInFirstIsOdd,\n//   anyElementInSecondIsEven,\n//   anyElementInSecondIsOdd,\n//   anyElementInThirdIsEven,\n//   anyElementInThirdIsOdd\n// );\n\n// 33. Metoda some()\nconst isOneUserActive = users => {\n  const isOneUsersActive = users.some(user => user.isActive === true);\n  return isOneUsersActive;\n};\n// console.log(isOneUserActive(users));\n\n// 34. Metoda reduce(callback, initialValue) - tablica\nconst players = {\n  mango: 1270,\n  poly: 468,\n  ajax: 710,\n  kiwi: 244,\n};\nconst playtimes = Object.values(players); // [1270, 468, 710, 244]\n\nconst totalPlayTime = playtimes.reduce((previousValue, number) => {\n  return previousValue + number;\n}, 0);\n\nconst averagePlayTime = totalPlayTime / playtimes.length;\n// console.log(\n//   `Table: ${playtimes}\\nTotal play time: ${totalPlayTime}\\nAverage play time: ${averagePlayTime}`\n// );\n\n// 35. Metoda reduce(callback, initialValue) - obiekt\nconst players35 = [\n  { name: 'Mango', playtime: 1270, gamesPlayed: 4 },\n  { name: 'Poly', playtime: 469, gamesPlayed: 2 },\n  { name: 'Ajax', playtime: 690, gamesPlayed: 3 },\n  { name: 'Kiwi', playtime: 241, gamesPlayed: 1 },\n];\n\nconst totalAveragePlaytimePerGame = players35.reduce(\n  (previousValue, player) => {\n    return previousValue + player.playtime / player.gamesPlayed;\n  },\n  0\n);\n// console.log(totalAveragePlaytimePerGame);\n\n// 36. Metoda reduce(callback, initialValue) - obiekt\nconst calculateTotalBalance = users => {\n  return users.reduce((totalBalance, user) => totalBalance + user.balance, 0);\n};\n// console.log(calculateTotalBalance(users));\n\n// 37. Metoda reduce(callback, initialValue) - obiekt\nconst getTotalFriendCount = users => {\n  return users.reduce(\n    (totalFriends, user) => totalFriends + user.friends.length,\n    0\n  );\n};\n// console.log(getTotalFriendCount(users));\n\n// 38. Metoda sort()\nconst releaseDates = [2016, 1967, 2008, 1984, 1973, 2012, 1997];\nconst authors = [\n  'Tanith Lee',\n  'Bernard Cornwell',\n  'Robert Sheckley',\n  'Fyodor Dostoevsky',\n];\nconst ascendingReleaseDates = [...releaseDates].sort();\nconst alphabeticalAuthors = [...authors].sort();\n// console.log(`${ascendingReleaseDates}\\n${alphabeticalAuthors}`);\n\n// 39. Metoda sort()\nconst releaseDates39 = [2016, 1967, 2008, 1984, 1973, 2012, 1997];\n\nconst ascendingReleaseDates39 = [...releaseDates39].sort((a, b) => a - b);\nconst descendingReleaseDates = [...releaseDates39].sort((a, b) => b - a);\n// console.log(`${ascendingReleaseDates39}\\n${descendingReleaseDates}`);\n\n// 40. Metoda sort()=> a.localeCompare(b));\nconst authors40 = [\n  'Tanith Lee',\n  'Bernard Cornwell',\n  'Robert Sheckley',\n  'Fyodor Dostoevsky',\n  'Howard Lovecraft',\n];\nconst authorsInAlphabetOrder = [...authors40].sort((a, b) =>\n  a.localeCompare(b)\n);\nconst authorsInReversedOrder = [...authors40].sort((a, b) =>\n  b.localeCompare(a)\n);\n// console.log(`${authorsInAlphabetOrder}\\n${authorsInReversedOrder}`);\n\n// 41. Metoda sort() localeCompare obiekt\nconst books41 = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    rating: 8.38,\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    rating: 8.51,\n  },\n  {\n    title: 'The Dream of a Ridiculous Man',\n    author: 'Fyodor Dostoevsky',\n    rating: 7.75,\n  },\n  {\n    title: 'Redder Than Blood',\n    author: 'Tanith Lee',\n    rating: 7.94,\n  },\n  {\n    title: 'Enemy of God',\n    author: 'Bernard Cornwell',\n    rating: 8.67,\n  },\n];\n\nconst sortedByAuthorName = [...books41].sort((firstBook, secondBook) =>\n  firstBook.author.localeCompare(secondBook.author)\n);\n\nconst sortedByReversedAuthorName = [...books41].sort((firstBook, secondBook) =>\n  secondBook.author.localeCompare(firstBook.author)\n);\n\nconst sortedByAscendingRating = [...books41].sort(\n  (firstBook, secondBook) => firstBook.rating - secondBook.rating\n);\n\nconst sortedByDescentingRating = [...books41].sort(\n  (firstBook, secondBook) => secondBook.rating - firstBook.rating\n);\n// console.log(sortedByAuthorName);\n// console.log(sortedByReversedAuthorName);\n\n// 42. Metoda sort()obiekt\nconst sortByAscendingBalance = users => {\n  const newTabUsers = [...users].sort(\n    (firstUser, secondUser) => firstUser.balance - secondUser.balance\n  );\n  return newTabUsers;\n};\n// console.log(sortByAscendingBalance(users));\n\n// 43. Metoda sort()obiekt\nconst sortByDescendingFriendCount = users => {\n  const newTabUsers = [...users].sort(\n    (firstUser, secondUser) =>\n      secondUser.friends.length - firstUser.friends.length\n  );\n  return newTabUsers;\n};\n// console.log(sortByDescendingFriendCount(users));\n\n// 44. Metoda sort() localeCompare obiekt\nconst sortByName = users => {\n  const sortedByUsersName = [...users].sort((firstUser, secondUser) =>\n    firstUser.name.localeCompare(secondUser.name)\n  );\n  return sortedByUsersName;\n};\n// console.log(sortByName(users));\n\n// 45. Metoda sort()\nconst books45 = [\n  {\n    title: 'The Last Kingdom',\n    author: 'Bernard Cornwell',\n    rating: 8.38,\n  },\n  {\n    title: 'Beside Still Waters',\n    author: 'Robert Sheckley',\n    rating: 8.51,\n  },\n  {\n    title: 'The Dream of a Ridiculous Man',\n    author: 'Fyodor Dostoevsky',\n    rating: 7.75,\n  },\n  { title: 'Redder Than Blood', author: 'Tanith Lee', rating: 7.94 },\n  {\n    title: 'The Dreams in the Witch House',\n    author: 'Howard Lovecraft',\n    rating: 8.67,\n  },\n];\nconst MIN_BOOK_RATING = 8;\n\nconst names = books45\n  .filter(book => book.rating > MIN_BOOK_RATING)\n  .map(book => book.author)\n  .sort((firstBook, secondBook) => firstBook.localeCompare(secondBook));\n// console.log(names); //[\"Bernard Cornwell\", \"Howard Lovecraft\", \"Robert Sheckley\"]\n\n// 45. Metoda .filter.map.sort()\nconst getNamesSortedByFriendCount = users => {\n  const names = users\n    .filter(book => book.rating > MIN_BOOK_RATING)\n    .map(book => book.author)\n    .sort((firstBook, secondBook) => firstBook.localeCompare(secondBook));\n  return names;\n};\n// console.log(getNamesSortedByFriendCount(users));\n\n// 46. Metoda .filter.map.sort()\nconst getNamesSortedByFriendCount46 = users => {\n  const names = [...users]\n    .sort(\n      (firstUser, secondUser) =>\n        firstUser.friends.length - secondUser.friends.length\n    )\n    .map(user => user.name);\n  return names;\n};\n// console.log(getNamesSortedByFriendCount46(users));\n\n// 47. Metoda .filter.map.sort()\nconst getSortedFriends = users => {\n  const names = users\n    .flatMap(user => user.friends)\n    .filter((friend, index, array) => array.indexOf(friend) === index)\n    .sort((firstFriend, secondFriend) =>\n      firstFriend.localeCompare(secondFriend)\n    );\n  return names;\n};\n// console.log(getSortedFriends(users));\n\n// 48. Metoda .filter.map.sort()\nconst getTotalBalanceByGender = (users, gender) => {\n  const totalBalance = [...users]\n    .filter(user => user.gender === gender)\n    .reduce((total, user) => {\n      return total + user.balance;\n    }, 0);\n  return totalBalance;\n};\n\nconsole.log(\n  `Mężczyźni: ${getTotalBalanceByGender(\n    users,\n    'male'\n  )}\\nKobiety: ${getTotalBalanceByGender(users, 'female')}`\n);\n\n//--------------------------------------------------------------------\nconst persons = [\n  {\n    firstName: 'Adam',\n    secondName: 'Bogota',\n    sex: 'man',\n    streetName: 'Piękna',\n    streetNumber: '8b/2',\n    zipCode: '22-800',\n    lacality: 'Wrocław',\n    dateOfBirth: new Date('1986 - 12 - 24'),\n    accountBalance: 156_000,\n    activeAccount: true,\n    phoneNumber: 325_346_543,\n    recentExpenses: [125, 2043, 468, 7843, 6775, 53432, 432, 4, 4325, 545436],\n    stats: {\n      followers: 603,\n      views: 487,\n      likes: 138,\n    },\n  },\n  {\n    firstName: 'Anna',\n    secondName: 'Nowak',\n    sex: 'woman',\n    streetName: 'Widok',\n    streetNumber: '2',\n    zipCode: '32-660',\n    lacality: 'Poznań',\n    dateOfBirth: new Date(1945 - 6 - 14),\n    accountBalance: 2355_040,\n    activeAccount: false,\n    phoneNumber: 527_949_383,\n    recentExpenses: [\n      543, 345, 34563, 23554, 11323, 43632, 4378, 864, 7564, 45636,\n    ],\n    stats: {\n      followers: 5603,\n      views: 4827,\n      likes: 1308,\n    },\n  },\n  {\n    firstName: 'Karol',\n    secondName: 'Cevalo',\n    sex: 'man',\n    streetName: 'Eklerda',\n    streetNumber: '15',\n    zipCode: '40-066',\n    lacality: 'Świebodzin',\n    dateOfBirth: new Date(1977 - 6 - 1),\n    accountBalance: 335_156_000_000,\n    activeAccount: true,\n    phoneNumber: 456_041_479,\n    recentExpenses: [\n      12452, 173053, 423054, 1100765, 92, 24000, 7843, 17004, 500, 500,\n    ],\n    stats: {\n      followers: 9503,\n      views: 27,\n      likes: 1,\n    },\n  },\n];\n\n// section3 article2\nconsole.log(\n  '%c section3 article2 ',\n  'color: rgb(0, 0, 0); background-color: rgb(255, 255, 0)',\n  'Tablica obiektów Metoda map()'\n);\n\nconsole.group('Metoda map()');\nconst names_s3a2 = persons.map(person => person.firstName);\nconsole.table(names_s3a2);\nconsole.groupEnd();\nconsole.log('-----------------------------------------------');\n\n// section5 article1\nconsole.log(\n  '%c section5 article1 ',\n  'color: rgb(0, 0, 0); background-color: rgb(255, 255, 0)',\n  'Tablica obiektów Metoda filter()'\n);\n\nconsole.group('Metoda filter()');\nconst names_s5a1 = persons.filter(person => person.firstName.startsWith('K'));\nconsole.table(names_s5a1);\n\nconsole.groupEnd();\nconsole.log('-----------------------------------------------');\n\n// section5 article2\nconsole.log(\n  '%c section5 article2 ',\n  'color: rgb(0, 0, 0); background-color: rgb(255, 255, 0)',\n  'Tablica obiektów Metoda filter()'\n);\n\nconsole.group('Metoda filter()');\nconst names_s5a2 = persons.filter(person => person.firstName.startsWith('K'));\nconsole.table(names_s5a2);\n\nconsole.groupEnd();\nconsole.log('-----------------------------------------------');\n"],"names":["Object","defineProperty","module","exports","value","default","arr","Array","isArray","$f215c72f040a88cf$var$_arrayLikeToArray","obj","parcelRequire","__esModule","len","length","i","arr2","iter","Symbol","iterator","from","TypeError","o","minLen","$7a2c4c4c44c69707$var$_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","test","$6195f07b5409ba15$exports","$6195f07b5409ba15$var$_arrayWithoutHoles","$6195f07b5409ba15$var$_iterableToArray","$6195f07b5409ba15$var$_unsupportedIterableToArray","$6195f07b5409ba15$var$_nonIterableSpread","$6195f07b5409ba15$var$_interopRequireDefault","courses","flatMap","student","filter","course","index","array","indexOf","label","color","find","option","map","planet","title","author","rating","book","genres","$0dbc0e9e19c87bac$var$users","email","eyeColor","friends","isActive","balance","skills","gender","age","$0dbc0e9e19c87bac$var$numbers","$0dbc0e9e19c87bac$var$books21","genre","$0dbc0e9e19c87bac$var$books28","$0dbc0e9e19c87bac$var$firstArray","param","$0dbc0e9e19c87bac$var$secondArray","$0dbc0e9e19c87bac$var$thirdArray","$0dbc0e9e19c87bac$var$playtimes","some","values","mango","poly","ajax","kiwi","$0dbc0e9e19c87bac$var$releaseDates39","reduce","previousValue","number","playtime","gamesPlayed","player","$parcel$interopDefault","sort","$0dbc0e9e19c87bac$var$authors40","a","b","$0dbc0e9e19c87bac$var$books41","localeCompare","$0dbc0e9e19c87bac$var$getTotalBalanceByGender","firstBook","secondBook","users21","user","total","console","log","concat","$0dbc0e9e19c87bac$var$persons","firstName","secondName","sex","streetName","streetNumber","zipCode","lacality","dateOfBirth","Date","accountBalance","activeAccount","phoneNumber","recentExpenses","stats","followers","views","likes","group","$0dbc0e9e19c87bac$var$names_s3a2","person","table","groupEnd","$0dbc0e9e19c87bac$var$names_s5a1","startsWith","$0dbc0e9e19c87bac$var$names_s5a2"],"version":3,"file":"08-metodyTablic.6a591e66.js.map"}