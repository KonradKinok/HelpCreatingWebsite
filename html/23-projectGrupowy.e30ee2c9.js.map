{"mappings":"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","sources":["src/scripts/23.mjs"],"sourcesContent":["'use strict';\n// import './sass/main.scss';\n\n//Import\nimport axios from 'axios';\n// -------------KonradKonik\n//CreatePagination import niezbędny dla <script type=\"module\">\n// import { createPagination } from '../scripts/23';\n// window.createPagination = createPagination;\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\n// Loader - klaudia\n\nconst loader = document.querySelector('.loader');\n\nfunction showLoader() {\n  loader.style.display = 'block';\n}\n\nfunction hideLoader() {\n  loader.style.display = 'none';\n}\n\n// hideLoader(); // Ukrycie loadera na początku\n\n//DOM\nconst homeButton = document.querySelector('span#logo');\nconst gallery = document.querySelector('ul#cards-list');\nconst paginationButtons = document.querySelector('div#pagination-new');\nconst pagination = document.querySelector('ul#pagination-new-list');\nconst paginationButtonLeft = paginationButtons.querySelector(\n  'button#pagination-btn-left'\n);\nconst paginationButtonRight = paginationButtons.querySelector(\n  'button#pagination-btn-right'\n);\n//Global variables\nlet noEventListener = true;\n//Listeners\nhomeButton.addEventListener('click', ev => {\n  ev.preventDefault();\n  const pageNumber = 1;\n  getMostPopularMovies(pageNumber);\n});\ngetMostPopularMovies(1);\n//Functions\n/**\n *getMostPopularMoviesTmdbApi\n ** Pobiera dane o najpopularniejszych filmach z API TMDb.\n * @param {number} currentPage Numer bieżącej strony do pobrania.\n * @returns {Promise<any>} Dane o najpopularniejszych filmach.\n */\nasync function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n/**\n * getMostPopularMovies\n ** Pobiera dane o najpopularniejszych filmach z określonej strony i renderuje je na stronie.\n * @param {number} pageNumber - Numer strony do pobrania danych o najpopularniejszych filmach.\n * @returns {void}\n */\nfunction getMostPopularMovies(pageNumber) {\n  if (pageNumber > 500) {\n    pageNumber = 500;\n  }\n  getMostPopularMoviesTmdbApi(pageNumber)\n    .then(dataMovies => {\n      renderMovies(dataMovies);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n/**\n *renderMovies\n ** Renderuje filmy na stronie internetowej na podstawie danych o filmach.\n * @param {object} dataMovies - Obiekt zawierający dane o filmach.\n * @param {number} dataMovies.total_pages - Całkowita liczba stron filmów.\n * @param {number} dataMovies.page - Aktualna strona.\n * @param {Array} dataMovies.results - Tablica obiektów zawierających dane o pojedynczych filmach.\n * @param {number} dataMovies.results[].id - Identyfikator filmu.\n * @param {string} dataMovies.results[].title - Tytuł filmu.\n * @param {string} dataMovies.results[].vote_average - Średnia ocen.\n * @param {string} dataMovies.results[].poster_path - Ścieżka do pliku z obrazem plakatu filmowego.\n * @param {string} dataMovies.results[].release_date - Data premiery filmu.\n * @param {Array} dataMovies.results[].genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {void}\n */\nfunction renderMovies(dataMovies) {\n  gallery.innerHTML = null;\n  let totalPages = dataMovies.total_pages;\n  if (totalPages > 500) {\n    totalPages = 500;\n  }\n  const currentPage = dataMovies.page;\n  const filmsList = dataMovies.results\n    .map(\n      ({ id, title, poster_path, release_date, genre_ids, vote_average }) => {\n        //Img\n        const urlSizePoster = getUrlSizePoster(poster_path);\n        const urlW92 = urlSizePoster.find(obj => obj.name === 'w92');\n        const urlW154 = urlSizePoster.find(obj => obj.name === 'w154');\n        const urlW185 = urlSizePoster.find(obj => obj.name === 'w185');\n        const urlW342 = urlSizePoster.find(obj => obj.name === 'w342');\n        const urlW500 = urlSizePoster.find(obj => obj.name === 'w500');\n        const urlW780 = urlSizePoster.find(obj => obj.name === 'w780');\n        const urlOriginal = urlSizePoster.find(obj => obj.name === 'original');\n\n        const genres = getGenres(genre_ids);\n        const year = release_date.split('-')[0];\n        const voteAverage = vote_average.toFixed(1);\n\n        return `<li>\n            <div class=\"card\" data-id=\"${id}\">\n              <div >\n                <img class=\"card-img\"\n                  alt=\"${title}\"\n                  src=\"${urlW154.url}\"\n                  srcset=\"\n                    ${urlW185.url} 185w,\n                    ${urlW342.url} 342w,\n                    ${urlW500.url} 500w,\n                    ${urlW780.url} 780w\n                     ${urlOriginal.url} 2000w\n                  \"\n                  sizes=\"(min-width: 1157px) 780px, (min-width: 768px) 500px, (max-width: 767px) 342px, 100vw\"\n                />\n              </div>\n              <div class=\"card-text\">\n                <p class=\"card-text-title\">${title}</p>\n                <p class=\"card-text-genre\">${genres} | ${year}</p>\n                <p class=\"card-text-genre\">${voteAverage}</p>\n              </div>\n            </div>\n          </li>`;\n      }\n    )\n    .join('');\n\n  gallery.insertAdjacentHTML('beforeend', filmsList);\n  if (createPaginationNew) {\n    createPaginationNew(totalPages, currentPage, getMostPopularMovies);\n  }\n}\n\n/**\n *createPaginationNew\n ** Tworzy elementy paginacji i dodaje nasłuchiwacze zdarzeń dla kliknięć na te elementy.\n *\n * @param {number} totalPages - Całkowita liczba stron.\n * @param {number} page - Numer bieżącej strony.\n * @param {function(number): void} callback - Funkcja wywoływana po kliknięciu elementu paginacji, przyjmująca numer nowej strony.\n * @returns {string} HTML string z wygenerowanymi elementami paginacji.\n */\nfunction createPaginationNew(totalPages, page, callback) {\n  let liTag = '';\n  let currentPage;\n  let active;\n  let beforePage = page - 2;\n  let afterPage = page + 2;\n\n  if (page >= 1) {\n    paginationButtonLeft.dataset.page = `${page - 1}`;\n    if (page === 1) {\n      paginationButtonLeft.disabled = true;\n    } else {\n      paginationButtonLeft.disabled = false;\n    }\n    if (window.matchMedia('(min-width: 768px)').matches) {\n      if (page > 3) {\n        liTag += `<li class=\"pagination-new-numb\" data-page=\"1\"><span>1</span></li>`;\n        if (page > 4) {\n          liTag += `<li class=\"pagination-new-dots\">...</li>`;\n        }\n      }\n    }\n\n    if (page == totalPages) {\n      beforePage = beforePage - 1;\n    } else if (page == totalPages - 1) {\n      beforePage = beforePage;\n    }\n    if (page == 1) {\n      afterPage = afterPage + 1;\n    } else if (page == 2) {\n      afterPage = afterPage;\n    }\n\n    for (var plength = beforePage; plength <= afterPage; plength++) {\n      if (plength > totalPages) {\n        continue;\n      }\n      if (plength <= 0) {\n        continue;\n      }\n      if (page == plength) {\n        active = 'active';\n        currentPage = \"id = 'pagination-current-page'\";\n      } else {\n        active = '';\n        currentPage = '';\n      }\n      liTag += `<li class=\"pagination-new-numb ${active}\" ${currentPage} data-page=\"${plength}\"><span>${plength}</span></li>`;\n    }\n\n    if (window.matchMedia('(min-width: 768px)').matches) {\n      if (page < totalPages - 2) {\n        if (page < totalPages - 3) {\n          liTag += `<li class=\"pagination-new-dots\">...</li>`;\n        }\n        liTag += `<li class=\"pagination-new-last pagination-new-numb\" data-page=\"${totalPages}\"><span>${totalPages}</span></li>`;\n      }\n    }\n    if (page < totalPages) {\n      paginationButtonRight.dataset.page = `${page + 1}`;\n      paginationButtonRight.disabled = false;\n    } else if (page === totalPages) {\n      paginationButtonRight.disabled = true;\n    }\n    pagination.innerHTML = liTag;\n\n    // Add event listeners\n    const paginationItems = pagination.querySelectorAll('li[data-page]');\n    paginationItems.forEach(item => {\n      item.addEventListener('click', event => {\n        const newPage = Number(event.currentTarget.getAttribute('data-page'));\n        callback(newPage);\n      });\n    });\n\n    if (noEventListener) {\n      paginationButtonLeft.addEventListener('click', event => {\n        const newPage = Number(event.currentTarget.getAttribute('data-page'));\n        if (newPage >= 1) {\n          callback(newPage);\n        }\n      });\n\n      paginationButtonRight.addEventListener('click', event => {\n        const newPage = Number(event.currentTarget.getAttribute('data-page'));\n        if (newPage <= totalPages) {\n          callback(newPage);\n        }\n      });\n      noEventListener = false;\n    }\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n    return liTag;\n  }\n}\n\n/**\n *getUrlSizePoster\n ** Generuje listę obiektów zawierających URL różnych rozmiarów obrazka.\n * @param {string} posterPath Endpoint ścieżki do pliku obrazka\n * @returns {Object[]} Tablica obiektów zawierających nazwę i URL różnych rozmiarów obrazka.\n */\nfunction getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\nlet tabGenres = null;\ngetGenresTemp();\nconsole.log('Pierwsze wywołanie', tabGenres);\nasync function getGenresTemp() {\n  try {\n    tabGenres = await getConfigurationTmdbApi();\n    await tabGenres;\n    // console.log(dataGenres.genres);\n    // tabGenres = dataGenres.genres;\n    // console.log(tabGenres); // Log tabGenres here to see the updated value\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getConfigurationTmdbApi() {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n  });\n  const url = `https://api.themoviedb.org/3/genre/movie/list?${searchParams}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n/**\n *getGenres\n ** Zwraca nazwy gatunków filmowych na podstawie ich identyfikatorów.\n * @param {number[]} genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {string} Nazwy gatunków filmowych, oddzielone przecinkami.\n */\nfunction getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n\n// -------------KonradKonik End\n\n// MartaMajnusz - wyszukiwarka (F10)\n\nconst search = document.querySelector('.search-form');\nconst cardsList = document.querySelector('ul#cards-list');\nlet lastSearchTerm;\n\nif (search) {\n  search.addEventListener('submit', async ev => {\n    ev.preventDefault();\n    cardsList.innerHTML = ` `;\n    const warning = document.querySelector(`p.warning`);\n    const searchTerm = ev.currentTarget.elements.searchQuery.value;\n    lastSearchTerm = searchTerm;\n\n    try {\n      const data = await searchMovies(lastSearchTerm);\n      const dataMovies = data.results;\n      const genresList = await fetchGenresList();\n\n      if (searchTerm === lastSearchTerm) {\n        if (data.results.length === 0) {\n          console.log(`Nie znaleziono filmów`);\n          warning.innerText = `Search result not successful. Enter the correct movie name and`;\n        } else {\n          createCards(dataMovies, genresList);\n        }\n      }\n    } catch (error) {\n      console.error('Wystąpił błąd:', error);\n    }\n  });\n}\n\nasync function fetchGenresList() {\n  const url = `https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=6bb894494c1a707618648b9164f393c2`;\n  try {\n    const response = await axios.get(url);\n    return response.data.genres;\n  } catch (error) {\n    console.error('Wystąpił błąd podczas pobierania listy gatunków:', error);\n    throw error;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// wyszukiwarka\nasync function searchMovies(searchTerm) {\n  try {\n    showLoader(); // Wyświetlenie loadera przed wyszukaniem filmów\n    const encodedSearchTerm = encodeURIComponent(searchTerm);\n    const url = `https://api.themoviedb.org/3/search/movie?query=${encodedSearchTerm}&api_key=d45c591dd3ef2fb9c22b9964b5ee2547`;\n    const response = await axios.get(url);\n    hideLoader(); // Ukrycie loadera po otrzymaniu odpowiedzi\n    return response.data;\n  } catch (error) {\n    hideLoader(); // Ukrycie loadera w przypadku błędu\n    console.error('Wystąpił błąd podczas wyszukiwania:', error);\n    throw error;\n  }\n}\n\n// ----------------------------------------------------------------------------\n//tworzenie kart\nfunction createCards(dataMovies, genresList) {\n  const gallery = document.querySelector('.cards-list');\n  dataMovies.forEach(element => {\n    const id = element.id;\n    const posterPath = element.poster_path;\n\n    const genreIds = element.genre_ids;\n    const genreNames = [];\n    genreIds.forEach(id => {\n      const genre = genresList.find(genre => genre.id === id);\n      if (genre) {\n        genreNames.push(genre.name);\n      } else {\n        genreNames.push('Unknown');\n      }\n    });\n\n    const title = element.title;\n    const releaseDate = element.release_date;\n    const d = new Date(releaseDate);\n    let year = d.getFullYear();\n\n    const card = document.createElement(`div`);\n    card.classList.add('card');\n    card.innerHTML = `\n    <li>\n  <div class=\"card\" data-id=\"${id}\">\n    <div class=\"card-img\">\n\n    <img src =\"https://image.tmdb.org/t/p/original/${posterPath}\"/></div>\n    <div class=\"card-text\">\n      <p class=\"card-text-title\">${title}</p>\n      <p class=\"card-text-genre\">${genreNames.join(', ')} | ${year}</p>\n    </div>\n  </div>\n</li>\n    `;\n    gallery.appendChild(card);\n  });\n}\n\n// Marta - koniec\n"],"names":["$2shzp","parcelRequire","default","defaults","headers","common","$8a7f79193043759c$var$loader","document","querySelector","$8a7f79193043759c$var$hideLoader","style","display","$8a7f79193043759c$var$homeButton","$8a7f79193043759c$var$gallery","$8a7f79193043759c$var$paginationButtons","$8a7f79193043759c$var$pagination","$8a7f79193043759c$var$paginationButtonLeft","$8a7f79193043759c$var$paginationButtonRight","$8a7f79193043759c$var$noEventListener","$8a7f79193043759c$var$getMostPopularMovies","pageNumber","async","currentPage","url","URLSearchParams","language","page","get","data","$8a7f79193043759c$var$getMostPopularMoviesTmdbApi","then","dataMovies","innerHTML","totalPages","total_pages","filmsList","results","map","id","title","poster_path","release_date","genre_ids","vote_average","urlSizePoster","posterPath","size","name","$8a7f79193043759c$var$getUrlSizePoster","urlW154","find","obj","urlW185","urlW342","urlW500","urlW780","urlOriginal","genres","matchingGenres","filter","genre","includes","join","$8a7f79193043759c$var$getGenres","year","split","voteAverage","toFixed","insertAdjacentHTML","$8a7f79193043759c$var$createPaginationNew","$8a7f79193043759c$var$renderMovies","catch","error","console","callback","active","liTag","beforePage","afterPage","dataset","disabled","window","matchMedia","matches","plength","querySelectorAll","forEach","item","addEventListener","event","newPage","Number","currentTarget","getAttribute","scrollTo","top","behavior","ev","preventDefault","$8a7f79193043759c$var$tabGenres","$8a7f79193043759c$var$getConfigurationTmdbApi","$8a7f79193043759c$var$getGenresTemp","log","$8a7f79193043759c$var$search","$8a7f79193043759c$var$cardsList","$8a7f79193043759c$var$lastSearchTerm","warning","searchTerm","elements","searchQuery","value","encodeURIComponent","response","$8a7f79193043759c$var$searchMovies","genresList","$8a7f79193043759c$var$fetchGenresList","length","innerText","gallery1","element","id1","genreIds","genreNames","genre1","push","releaseDate","Date","getFullYear","card","createElement","classList","add","appendChild","$8a7f79193043759c$var$createCards"],"version":3,"file":"23-projectGrupowy.e30ee2c9.js.map"}