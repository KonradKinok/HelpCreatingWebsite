{"mappings":"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","sources":["src/scripts/23.mjs"],"sourcesContent":["'use strict';\n// import './sass/main.scss';\n\n//Import\nimport axios from 'axios';\n// -------------KonradKonik\n//CreatePagination import niezbędny dla <script type=\"module\">\n// import { createPagination } from '../scripts/23';\n// window.createPagination = createPagination;\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\n// Loader - klaudia\n\nconst loader = document.querySelector('.loader');\n\nfunction showLoader() {\n  loader.style.display = 'block';\n}\n\nfunction hideLoader() {\n  loader.style.display = 'none';\n}\n\n// hideLoader(); // Ukrycie loadera na początku\n\n//DOM\nconst homeButton = document.querySelector('span#logo');\nconst gallery = document.querySelector('ul#cards-list');\nconst paginationButtons = document.querySelector('div#pagination-new');\nconst pagination = document.querySelector('ul#pagination-new-list');\nconst paginationButtonLeft = paginationButtons.querySelector(\n  'button#pagination-btn-left'\n);\nconst paginationButtonRight = paginationButtons.querySelector(\n  'button#pagination-btn-right'\n);\n//Global variables\nlet noEventListener = true;\n//Listeners\nhomeButton.addEventListener('click', ev => {\n  ev.preventDefault();\n  const pageNumber = 1;\n  getMostPopularMovies(pageNumber);\n});\ngetMostPopularMovies(1);\n//Functions\n/**\n *getMostPopularMoviesTmdbApi\n ** Pobiera dane o najpopularniejszych filmach z API TMDb.\n * @param {number} currentPage Numer bieżącej strony do pobrania.\n * @returns {Promise<any>} Dane o najpopularniejszych filmach.\n */\nasync function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n/**\n * getMostPopularMovies\n ** Pobiera dane o najpopularniejszych filmach z określonej strony i renderuje je na stronie.\n * @param {number} pageNumber - Numer strony do pobrania danych o najpopularniejszych filmach.\n * @returns {void}\n */\nfunction getMostPopularMovies(pageNumber) {\n  if (pageNumber > 500) {\n    pageNumber = 500;\n  }\n  getMostPopularMoviesTmdbApi(pageNumber)\n    .then(dataMovies => {\n      renderMovies(dataMovies);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n/**\n *renderMovies\n ** Renderuje filmy na stronie internetowej na podstawie danych o filmach.\n * @param {object} dataMovies - Obiekt zawierający dane o filmach.\n * @param {number} dataMovies.total_pages - Całkowita liczba stron filmów.\n * @param {number} dataMovies.page - Aktualna strona.\n * @param {Array} dataMovies.results - Tablica obiektów zawierających dane o pojedynczych filmach.\n * @param {number} dataMovies.results[].id - Identyfikator filmu.\n * @param {string} dataMovies.results[].title - Tytuł filmu.\n * @param {string} dataMovies.results[].vote_average - Średnia ocen.\n * @param {string} dataMovies.results[].poster_path - Ścieżka do pliku z obrazem plakatu filmowego.\n * @param {string} dataMovies.results[].release_date - Data premiery filmu.\n * @param {Array} dataMovies.results[].genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {void}\n */\nfunction renderMovies(dataMovies) {\n  gallery.innerHTML = null;\n  let totalPages = dataMovies.total_pages;\n  if (totalPages > 500) {\n    totalPages = 500;\n  }\n  const currentPage = dataMovies.page;\n  const filmsList = dataMovies.results\n    .map(\n      ({ id, title, poster_path, release_date, genre_ids, vote_average }) => {\n        //Img\n        const urlSizePoster = getUrlSizePoster(poster_path);\n        const urlW92 = urlSizePoster.find(obj => obj.name === 'w92');\n        const urlW154 = urlSizePoster.find(obj => obj.name === 'w154');\n        const urlW185 = urlSizePoster.find(obj => obj.name === 'w185');\n        const urlW342 = urlSizePoster.find(obj => obj.name === 'w342');\n        const urlW500 = urlSizePoster.find(obj => obj.name === 'w500');\n        const urlW780 = urlSizePoster.find(obj => obj.name === 'w780');\n        const urlOriginal = urlSizePoster.find(obj => obj.name === 'original');\n\n        const genres = getGenres(genre_ids);\n        const year = release_date.split('-')[0];\n        const voteAverage = vote_average.toFixed(1);\n\n        return `<li>\n            <div class=\"card\" data-id=\"${id}\">\n              <div >\n                <img class=\"card-img\"\n                  alt=\"${title}\"\n                  src=\"${urlW154.url}\"\n                  srcset=\"\n                    ${urlW185.url} 185w,\n                    ${urlW342.url} 342w,\n                    ${urlW500.url} 500w,\n                    ${urlW780.url} 780w\n                     ${urlOriginal.url} 2000w\n                  \"\n                  sizes=\"(min-width: 1157px) 780px, (min-width: 768px) 500px, (max-width: 767px) 342px, 100vw\"\n                />\n              </div>\n              <div class=\"card-text\">\n                <p class=\"card-text-title\">${title}</p>\n                <p class=\"card-text-genre\">${genres} | ${year}</p>\n                <p class=\"card-text-genre\">${voteAverage}</p>\n              </div>\n            </div>\n          </li>`;\n      }\n    )\n    .join('');\n\n  gallery.insertAdjacentHTML('beforeend', filmsList);\n  if (createPaginationNew) {\n    createPaginationNew(totalPages, currentPage, getMostPopularMovies);\n  }\n}\n\n/**\n *createPaginationNew\n ** Tworzy elementy paginacji i dodaje nasłuchiwacze zdarzeń dla kliknięć na te elementy.\n *\n * @param {number} totalPages - Całkowita liczba stron.\n * @param {number} page - Numer bieżącej strony.\n * @param {function(number): void} callback - Funkcja wywoływana po kliknięciu elementu paginacji, przyjmująca numer nowej strony.\n * @returns {string} HTML string z wygenerowanymi elementami paginacji.\n */\nfunction createPaginationNew(totalPages, page, callback) {\n  let liTag = '';\n  let currentPage;\n  let active;\n  let beforePage = page - 2;\n  let afterPage = page + 2;\n\n  if (page >= 1) {\n    paginationButtonLeft.dataset.page = `${page - 1}`;\n    if (page === 1) {\n      paginationButtonLeft.disabled = true;\n    } else {\n      paginationButtonLeft.disabled = false;\n    }\n    if (window.matchMedia('(min-width: 768px)').matches) {\n      if (page > 3) {\n        liTag += `<li class=\"pagination-new-numb\" data-page=\"1\"><span>1</span></li>`;\n        if (page > 4) {\n          liTag += `<li class=\"pagination-new-dots\">...</li>`;\n        }\n      }\n    }\n\n    if (page == totalPages) {\n      beforePage = beforePage - 1;\n    } else if (page == totalPages - 1) {\n      beforePage = beforePage;\n    }\n    if (page == 1) {\n      afterPage = afterPage + 1;\n    } else if (page == 2) {\n      afterPage = afterPage;\n    }\n\n    for (var plength = beforePage; plength <= afterPage; plength++) {\n      if (plength > totalPages) {\n        continue;\n      }\n      if (plength <= 0) {\n        continue;\n      }\n      if (page == plength) {\n        active = 'active';\n        currentPage = \"id = 'pagination-current-page'\";\n      } else {\n        active = '';\n        currentPage = '';\n      }\n      liTag += `<li class=\"pagination-new-numb ${active}\" ${currentPage} data-page=\"${plength}\"><span>${plength}</span></li>`;\n    }\n\n    if (window.matchMedia('(min-width: 768px)').matches) {\n      if (page < totalPages - 2) {\n        if (page < totalPages - 3) {\n          liTag += `<li class=\"pagination-new-dots\">...</li>`;\n        }\n        liTag += `<li class=\"pagination-new-last pagination-new-numb\" data-page=\"${totalPages}\"><span>${totalPages}</span></li>`;\n      }\n    }\n    if (page < totalPages) {\n      paginationButtonRight.dataset.page = `${page + 1}`;\n      paginationButtonRight.disabled = false;\n    } else if (page === totalPages) {\n      paginationButtonRight.disabled = true;\n    }\n    pagination.innerHTML = liTag;\n\n    // Add event listeners\n    const paginationItems = pagination.querySelectorAll('li[data-page]');\n    paginationItems.forEach(item => {\n      item.addEventListener('click', event => {\n        const newPage = Number(event.currentTarget.getAttribute('data-page'));\n        callback(newPage);\n      });\n    });\n\n    if (noEventListener) {\n      paginationButtonLeft.addEventListener('click', event => {\n        const newPage = Number(event.currentTarget.getAttribute('data-page'));\n        if (newPage >= 1) {\n          callback(newPage);\n        }\n      });\n\n      paginationButtonRight.addEventListener('click', event => {\n        const newPage = Number(event.currentTarget.getAttribute('data-page'));\n        if (newPage <= totalPages) {\n          callback(newPage);\n        }\n      });\n      noEventListener = false;\n    }\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n    return liTag;\n  }\n}\n\n/**\n *getUrlSizePoster\n ** Generuje listę obiektów zawierających URL różnych rozmiarów obrazka.\n * @param {string} posterPath Endpoint ścieżki do pliku obrazka\n * @returns {Object[]} Tablica obiektów zawierających nazwę i URL różnych rozmiarów obrazka.\n */\nfunction getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\nlet tabGenres = null;\ngetGenresTemp();\nconsole.log('Pierwsze wywołanie', tabGenres);\nasync function getGenresTemp() {\n  try {\n    tabGenres = await getConfigurationTmdbApi();\n    await tabGenres;\n    // console.log(dataGenres.genres);\n    // tabGenres = dataGenres.genres;\n    // console.log(tabGenres); // Log tabGenres here to see the updated value\n  } catch (error) {\n    console.error(error);\n  }\n}\nasync function getConfigurationTmdbApi() {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n  });\n  const url = `https://api.themoviedb.org/3/genre/movie/list?${searchParams}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n/**\n *getGenres\n ** Zwraca nazwy gatunków filmowych na podstawie ich identyfikatorów.\n * @param {number[]} genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {string} Nazwy gatunków filmowych, oddzielone przecinkami.\n */\nfunction getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n\n// -------------KonradKonik End\n\n// MartaMajnusz - wyszukiwarka (F10)\n\nconst search = document.querySelector('.search-form');\nconst cardsList = document.querySelector('ul#cards-list');\nlet lastSearchTerm;\n\nif (search) {\n  search.addEventListener('submit', async ev => {\n    ev.preventDefault();\n    cardsList.innerHTML = ` `;\n    const warning = document.querySelector(`p.warning`);\n    const searchTerm = ev.currentTarget.elements.searchQuery.value;\n    lastSearchTerm = searchTerm;\n\n    try {\n      const data = await searchMovies(lastSearchTerm);\n      const dataMovies = data.results;\n      const genresList = await fetchGenresList();\n\n      if (searchTerm === lastSearchTerm) {\n        if (data.results.length === 0) {\n          console.log(`Nie znaleziono filmów`);\n          warning.innerText = `Search result not successful. Enter the correct movie name and`;\n        } else {\n          createCards(dataMovies, genresList);\n        }\n      }\n    } catch (error) {\n      console.error('Wystąpił błąd:', error);\n    }\n  });\n}\n\nasync function fetchGenresList() {\n  const url = `https://api.themoviedb.org/3/genre/movie/list?language=en&api_key=6bb894494c1a707618648b9164f393c2`;\n  try {\n    const response = await axios.get(url);\n    return response.data.genres;\n  } catch (error) {\n    console.error('Wystąpił błąd podczas pobierania listy gatunków:', error);\n    throw error;\n  }\n}\n\n// ----------------------------------------------------------------------------\n// wyszukiwarka\nasync function searchMovies(searchTerm) {\n  try {\n    showLoader(); // Wyświetlenie loadera przed wyszukaniem filmów\n    const encodedSearchTerm = encodeURIComponent(searchTerm);\n    const url = `https://api.themoviedb.org/3/search/movie?query=${encodedSearchTerm}&api_key=d45c591dd3ef2fb9c22b9964b5ee2547`;\n    const response = await axios.get(url);\n    hideLoader(); // Ukrycie loadera po otrzymaniu odpowiedzi\n    return response.data;\n  } catch (error) {\n    hideLoader(); // Ukrycie loadera w przypadku błędu\n    console.error('Wystąpił błąd podczas wyszukiwania:', error);\n    throw error;\n  }\n}\n\n// ----------------------------------------------------------------------------\n//tworzenie kart\nfunction createCards(dataMovies, genresList) {\n  const gallery = document.querySelector('.cards-list');\n  dataMovies.forEach(element => {\n    const id = element.id;\n    const posterPath = element.poster_path;\n\n    const genreIds = element.genre_ids;\n    const genreNames = [];\n    genreIds.forEach(id => {\n      const genre = genresList.find(genre => genre.id === id);\n      if (genre) {\n        genreNames.push(genre.name);\n      } else {\n        genreNames.push('Unknown');\n      }\n    });\n\n    const title = element.title;\n    const releaseDate = element.release_date;\n    const d = new Date(releaseDate);\n    let year = d.getFullYear();\n\n    const card = document.createElement(`div`);\n    card.classList.add('card');\n    card.innerHTML = `\n    <li>\n  <div class=\"card\" data-id=\"${id}\">\n    <div class=\"card-img\">\n\n    <img src =\"https://image.tmdb.org/t/p/original/${posterPath}\"/></div>\n    <div class=\"card-text\">\n      <p class=\"card-text-title\">${title}</p>\n      <p class=\"card-text-genre\">${genreNames.join(', ')} | ${year}</p>\n    </div>\n  </div>\n</li>\n    `;\n    gallery.appendChild(card);\n  });\n}\n\n// Marta - koniec\n"],"names":["$bpxeT","parcelRequire","$dIxxU","default","defaults","headers","common","$9e0a88ff63ecd3c1$var$loader","document","querySelector","$9e0a88ff63ecd3c1$var$showLoader","style","display","$9e0a88ff63ecd3c1$var$hideLoader","$9e0a88ff63ecd3c1$var$homeButton","$9e0a88ff63ecd3c1$var$gallery","$9e0a88ff63ecd3c1$var$paginationButtons","$9e0a88ff63ecd3c1$var$pagination","$9e0a88ff63ecd3c1$var$paginationButtonLeft","$9e0a88ff63ecd3c1$var$paginationButtonRight","$9e0a88ff63ecd3c1$var$noEventListener","$9e0a88ff63ecd3c1$var$_getMostPopularMoviesTmdbApi","$parcel$interopDefault","$2TvXO","mark","_callee","currentPage","searchParams","url","response","URLSearchParams","language","page","concat","get","_ctx","sent","data","apply","this","arguments","$9e0a88ff63ecd3c1$var$getMostPopularMovies","pageNumber","$9e0a88ff63ecd3c1$var$getMostPopularMoviesTmdbApi","then","dataMovies","innerHTML","totalPages","total_pages","filmsList","results","map","param","posterPath","id","title","poster_path","release_date","genre_ids","vote_average","urlSizePoster","size","name","urlW154","find","obj","urlW185","urlW342","urlW500","urlW780","urlOriginal","genres","filter","genre","includes","join","$9e0a88ff63ecd3c1$var$getGenres","year","split","voteAverage","toFixed","insertAdjacentHTML","$9e0a88ff63ecd3c1$var$createPaginationNew","$9e0a88ff63ecd3c1$var$renderMovies","catch","error","console","callback","active","liTag","beforePage","afterPage","dataset","disabled","window","matchMedia","matches","plength","querySelectorAll","forEach","item","addEventListener","event","newPage","Number","currentTarget","getAttribute","scrollTo","top","behavior","ev","preventDefault","$9e0a88ff63ecd3c1$var$tabGenres","$9e0a88ff63ecd3c1$var$_getGenresTemp","$9e0a88ff63ecd3c1$var$getConfigurationTmdbApi","t0","$9e0a88ff63ecd3c1$var$_getConfigurationTmdbApi","$9e0a88ff63ecd3c1$var$getGenresTemp","log","$9e0a88ff63ecd3c1$var$lastSearchTerm","$9e0a88ff63ecd3c1$var$search","$9e0a88ff63ecd3c1$var$cardsList","$9e0a88ff63ecd3c1$var$fetchGenresList","$9e0a88ff63ecd3c1$var$_fetchGenresList","$9e0a88ff63ecd3c1$var$searchMovies","searchTerm","$9e0a88ff63ecd3c1$var$_searchMovies","encodedSearchTerm","encodeURIComponent","$9e0a88ff63ecd3c1$var$createCards","genresList","gallery1","element","id1","genreIds","genreNames","genre1","push","releaseDate","Date","getFullYear","card","createElement","classList","add","appendChild","warning","elements","searchQuery","value","length","innerText"],"version":3,"file":"23-projectGrupowy.fb337679.js.map"}