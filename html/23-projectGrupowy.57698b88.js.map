{"mappings":"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","sources":["src/scripts/23.mjs","src/scripts/23a.mjs"],"sourcesContent":["'use strict';\n// import './sass/main.scss';\n\n//Import\nimport axios from 'axios';\nimport * as mainMethods from './23a.mjs';\n// -------------KonradKonik\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\nlet pageNumber = 1;\nlet totalPages = 1;\n//DOM\nconst homeButton = document.querySelector('span#logo');\n\nconst gallery = document.querySelector('ul#cards-list');\nconst controlPagination = document.querySelector('ul#control-pagination-list');\n//Listeners\nhomeButton.addEventListener('click', ev => {\n  ev.preventDefault();\n  pageNumber = 1;\n  getMostPopularMovies(pageNumber);\n});\n\n//Functions\n\n/**\n *getMostPopularMoviesTmdbApi\n ** Pobiera dane o najpopularniejszych filmach z API TMDb.\n * @param {number} currentPage Numer bieżącej strony do pobrania.\n * @returns {Promise<any>} Dane o najpopularniejszych filmach.\n */\nasync function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n/**\n * getMostPopularMovies\n ** Pobiera dane o najpopularniejszych filmach z określonej strony i renderuje je na stronie.\n * @param {number} pageNumber - Numer strony do pobrania danych o najpopularniejszych filmach.\n * @returns {void}\n */\nfunction getMostPopularMovies(pageNumber) {\n  getMostPopularMoviesTmdbApi(pageNumber)\n    .then(dataMovies => {\n      renderMovies(dataMovies);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\n/**\n *renderMovies\n ** Renderuje filmy na stronie internetowej na podstawie danych o filmach.\n * @param {object} dataMovies - Obiekt zawierający dane o filmach.\n * @param {number} dataMovies.total_pages - Całkowita liczba stron filmów.\n * @param {Array} dataMovies.results - Tablica obiektów zawierających dane o pojedynczych filmach.\n * @param {number} dataMovies.results[].id - Identyfikator filmu.\n * @param {string} dataMovies.results[].title - Tytuł filmu.\n * @param {string} dataMovies.results[].poster_path - Ścieżka do pliku z obrazem plakatu filmowego.\n * @param {string} dataMovies.results[].release_date - Data premiery filmu.\n * @param {Array} dataMovies.results[].genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {void}\n */\nfunction renderMovies(dataMovies) {\n  gallery.innerHTML = null;\n  const totalPages = dataMovies.total_pages;\n  const currentPage = dataMovies.page;\n  const filmsList = dataMovies.results\n    .map(({ id, title, poster_path, release_date, genre_ids }) => {\n      //Img\n      const urlSizePoster = getUrlSizePoster(poster_path);\n      const urlW92 = urlSizePoster.find(obj => obj.name === 'w92');\n      const urlW154 = urlSizePoster.find(obj => obj.name === 'w154');\n      const urlW185 = urlSizePoster.find(obj => obj.name === 'w185');\n      const urlW342 = urlSizePoster.find(obj => obj.name === 'w342');\n      const urlW500 = urlSizePoster.find(obj => obj.name === 'w500');\n      const urlW780 = urlSizePoster.find(obj => obj.name === 'w780');\n      const urlOriginal = urlSizePoster.find(obj => obj.name === 'original');\n\n      const genres = getGenres(genre_ids);\n      const year = release_date.split('-')[0];\n\n      return `<li>\n            <div class=\"card\" data-id=\"${id}\">\n              <div >\n                <img class=\"card-img\"\n                  alt=\"${title}\"\n                  src=\"${urlW154.url}\"\n                  srcset=\"\n                    ${urlW185.url} 185w,\n                    ${urlW342.url} 342w,\n                    ${urlW500.url} 500w,\n                    ${urlW780.url} 780w\n                     ${urlOriginal.url} 2000w\n                  \"\n                  sizes=\"(min-width: 1157px) 780px, (min-width: 768px) 500px, (max-width: 767px) 342px, 100vw\"\n                />\n              </div>\n              <div class=\"card-text\">\n                <p class=\"card-text-title\">${title}</p>\n                <p class=\"card-text-genre\">${genres} | ${year}</p>\n              </div>\n            </div>\n          </li>`;\n    })\n    .join('');\n  if (controlPagination) {\n    controlPagination.innerHTML = createPagination(totalPages, currentPage);\n    console.log('controlPagination', totalPages, currentPage);\n  }\n\n  gallery.insertAdjacentHTML('beforeend', filmsList);\n}\n// let totalPages = 1000;\n\nfunction createPagination(totalPages, page) {\n  let liTag = '';\n  let currentPage;\n  let active;\n  let beforePage = page - 2;\n  let afterPage = page + 2;\n\n  if (page > 1) {\n    liTag += `<li class=\"btn prev\" onclick=\"createPagination(${totalPages}, ${\n      page - 1\n    })\"><svg width=\"16\" height=\"16\">\n                  <use href=\"../images/icons.svg#icon-arrow-right\"></use>\n                </svg></li>`;\n  }\n\n  if (page > 3) {\n    liTag += `<li class=\"first numb\" onclick=\"createPagination(${totalPages}, 1)\"><span>1</span></li>`;\n    if (page > 4) {\n      liTag += `<li class=\"dots\"><span>...</span></li>`;\n    }\n  }\n\n  if (page == totalPages) {\n    beforePage = beforePage - 1;\n  } else if (page == totalPages - 1) {\n    beforePage = beforePage;\n  }\n  if (page == 1) {\n    afterPage = afterPage + 1;\n  } else if (page == 2) {\n    afterPage = afterPage;\n  }\n\n  for (var plength = beforePage; plength <= afterPage; plength++) {\n    if (plength > totalPages) {\n      continue;\n    }\n    if (plength <= 0) {\n      continue;\n    }\n    if (page == plength) {\n      active = 'active';\n      currentPage = \"id = 'pagination-current-page'\";\n    } else {\n      active = '';\n      currentPage = '';\n    }\n    liTag += `<li class=\"numb ${active}\" ${currentPage} onclick=\"createPagination(${totalPages}, ${plength})\"><span>${plength}</span></li>`;\n  }\n\n  if (page < totalPages - 2) {\n    if (page < totalPages - 3) {\n      liTag += `<li class=\"dots\"><span>...</span></li>`;\n    }\n    liTag += `<li class=\"last numb\" onclick=\"createPagination(${totalPages}, ${totalPages})\"><span>${totalPages}</span></li>`;\n  }\n\n  if (page < totalPages) {\n    liTag += `<li class=\"btn next\" onclick=\"createPagination(${totalPages}, ${\n      page + 1\n    })\"><svg width=\"16\" height=\"16\">\n          <use href=\"./images/icons.svg#icon-arrow-right\"></use>\n        </svg></li>`;\n  }\n\n  controlPagination.innerHTML = liTag;\n  return liTag;\n}\n/**\n *getUrlSizePoster\n ** Generuje listę obiektów zawierających URL różnych rozmiarów obrazka.\n * @param {string} posterPath Endpoint ścieżki do pliku obrazka\n * @returns {Object[]} Tablica obiektów zawierających nazwę i URL różnych rozmiarów obrazka.\n */\nfunction getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\n/**\n *getGenres\n ** Zwraca nazwy gatunków filmowych na podstawie ich identyfikatorów.\n * @param {number[]} genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {string} Nazwy gatunków filmowych, oddzielone przecinkami.\n */\nfunction getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n\n// -------------KonradKonik End\n\n// MartaMajnusz - wyszukiwarka (F10)\n// import {\n//   searchMovies,\n//   fetchGenresList,\n//   createCards,\n// } from './scripts/search.js';\n\n// const search = document.querySelector('.search-form');\n// const cardsList = document.querySelector('ul#cards-list');\n// let lastSearchTerm;\n\n// search.addEventListener('submit', async ev => {\n//   ev.preventDefault();\n//   cardsList.innerHTML = ` `;\n//   const warning = document.querySelector(`p.warning`);\n//   const searchTerm = ev.currentTarget.elements.searchQuery.value;\n//   lastSearchTerm = searchTerm;\n\n//   try {\n//     const data = await searchMovies(lastSearchTerm);\n//     const dataMovies = data.results;\n//     const genresList = await fetchGenresList();\n\n//     if (searchTerm === lastSearchTerm) {\n//       if (data.results.length === 0) {\n//         console.log(`Nie znaleziono filmów`);\n//         warning.innerText = `Search result not successful. Enter the correct movie name and`;\n//       } else {\n//         createCards(dataMovies, genresList);\n//       }\n//     }\n//   } catch (error) {\n//     console.error('Wystąpił błąd:', error);\n//   }\n// });\n\n// Marta - koniec\n","'use strict';\n//Import\nimport axios from 'axios';\n\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  console.log(url);\n  return response.data;\n}\n\nexport async function getTmdbConfiguration() {\n  const url = `https://api.themoviedb.org/3/configuration`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n// async function getTmdbGenres() {\n//   const searchParams = new URLSearchParams({\n//     language: 'en-US',\n//   });\n//   const url = `https://api.themoviedb.org/3/genre/movie/list?${searchParams}`;\n//   const response = await axios.get(url);\n//   return response.data;\n// }\n\n// export function getGenres() {\n//   try {\n//     const TAB_GENRIES = getTmdbGenres();\n//     // console.log(genres);\n//     return TAB_GENRIES;\n//   } catch (error) {\n//     // Notify.failure(`${error}`, optionsNotify);\n//     console.log(error);\n//     throw error; // Rzucamy błąd, aby móc go obsłużyć dalej, jeśli to konieczne\n//   }\n// }\nexport function getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\nexport function getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n"],"names":["$2shzp","parcelRequire","default","defaults","headers","common","$8a7f79193043759c$var$pageNumber","$8a7f79193043759c$var$homeButton","document","querySelector","$8a7f79193043759c$var$gallery","$8a7f79193043759c$var$controlPagination","addEventListener","ev","preventDefault","async","currentPage","url","URLSearchParams","language","page","get","data","$8a7f79193043759c$var$getMostPopularMoviesTmdbApi","then","dataMovies","innerHTML","totalPages1","total_pages","filmsList","results","map","id","title","poster_path","release_date","genre_ids","urlSizePoster","posterPath","size","name","$8a7f79193043759c$var$getUrlSizePoster","urlW154","find","obj","urlW185","urlW342","urlW500","urlW780","urlOriginal","genres","matchingGenres","filter","genre","includes","join","$8a7f79193043759c$var$getGenres","year","split","totalPages2","active","liTag","beforePage","afterPage","plength","$8a7f79193043759c$var$createPagination","console","log","insertAdjacentHTML","$8a7f79193043759c$var$renderMovies","catch","error"],"version":3,"file":"23-projectGrupowy.57698b88.js.map"}