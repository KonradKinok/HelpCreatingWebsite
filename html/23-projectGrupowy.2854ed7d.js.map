{"mappings":"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","sources":["src/scripts/23a.mjs","src/scripts/23.mjs"],"sourcesContent":["'use strict';\n//Import\nimport axios from 'axios';\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  console.log(url);\n  return response.data;\n}\n\nexport async function getTmdbConfiguration() {\n  const url = `https://api.themoviedb.org/3/configuration`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n// async function getTmdbGenres() {\n//   const searchParams = new URLSearchParams({\n//     language: 'en-US',\n//   });\n//   const url = `https://api.themoviedb.org/3/genre/movie/list?${searchParams}`;\n//   const response = await axios.get(url);\n//   return response.data;\n// }\n\n// export function getGenres() {\n//   try {\n//     const TAB_GENRIES = getTmdbGenres();\n//     // console.log(genres);\n//     return TAB_GENRIES;\n//   } catch (error) {\n//     // Notify.failure(`${error}`, optionsNotify);\n//     console.log(error);\n//     throw error; // Rzucamy błąd, aby móc go obsłużyć dalej, jeśli to konieczne\n//   }\n// }\nexport function getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\nexport function getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n","'use strict';\n//Import\nimport * as mainMethods from './functions.mjs';\nimport * as tmdb from './23a.mjs';\nimport axios from 'axios';\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\n\n//DOM\nconst searchButton = document.querySelector('button#search-button');\nconst gallery = document.querySelector('ul#cards-list');\nconst inputNumberPage = document.querySelector('input#input-page');\nconst inputTotalPage = document.querySelector('label#label-pages');\ninputNumberPage.value = 1;\ninputNumberPage.addEventListener('change', event => {\n  let pageNumber = inputNumberPage.value;\n  getMostPopularMovies(pageNumber);\n});\nsearchButton.addEventListener('click', ev => {\n  inputNumberPage.value = 1;\n  pageNumber = inputNumberPage.value;\n  getMostPopularMovies(pageNumber);\n});\n\n//Functions\nfunction getMostPopularMovies(pageNumber) {\n  tmdb\n    .getMostPopularMoviesTmdbApi(pageNumber)\n    .then(dataMovies => {\n      getTmdbConfiguration();\n      renderMovies(dataMovies);\n    })\n    .catch(error => {\n      //   Notify.failure(`${error}`, optionsNotify);\n      console.log(error);\n    });\n}\nfunction getTmdbConfiguration() {\n  tmdb\n    .getTmdbConfiguration()\n    .then(dataMovies => {\n      // console.log(dataMovies);\n    })\n    .catch(error => {\n      //   Notify.failure(`${error}`, optionsNotify);\n      console.log(error);\n    });\n}\nconst temp = tmdb.getUrlSizePoster('poster_path');\n// temp.\n// function renderMovies(dataMovies) {\n//   gallery.innerHTML = null;\n//   const filmsList = dataMovies.results\n//     .map(({ id, original_title, poster_path, release_date, genre_ids }) => {\n//       const urlSizePoster = tmdb.getUrlSizePoster(poster_path);\n//       const url = urlSizePoster.find(obj => obj.name === 'w500');\n//       const year = release_date.split('-')[0];\n//       const genres = tmdb.getGenres(genre_ids);\n\n//       const listItem = document.createElement('li');\n//       const divCard = document.createElement('div');\n//       divCard.classList.add('card');\n//       divCard.setAttribute('data-id', id);\n\n//       const divCardImg = document.createElement('div');\n//       divCardImg.classList.add('card-img');\n\n//       divCardImg.style.backgroundImage = `url(\"${url.url}\")`;\n\n//       const divCardText = document.createElement('div');\n//       divCardText.classList.add('card-text');\n\n//       const pCardTextTitle = document.createElement('p');\n//       pCardTextTitle.classList.add('card-text-title');\n//       pCardTextTitle.textContent = original_title;\n\n//       const pCardTextGenre = document.createElement('p');\n//       pCardTextGenre.classList.add('card-text-genre');\n//       pCardTextGenre.textContent = genres + ' | ' + year;\n\n//       divCardText.appendChild(pCardTextTitle);\n//       divCardText.appendChild(pCardTextGenre);\n\n//       divCard.appendChild(divCardImg);\n//       divCard.appendChild(divCardText);\n\n//       listItem.appendChild(divCard);\n//       gallery.appendChild(listItem);\n//     })\n//     .join('');\n\n//   gallery.insertAdjacentHTML('beforeend', filmsList);\n// }\n\nfunction renderMovies(dataMovies) {\n  gallery.innerHTML = null;\n  const totalPages = dataMovies.total_pages;\n\n  const filmsList = dataMovies.results\n    .map(({ id, title, poster_path, release_date, genre_ids }) => {\n      //Img\n      const urlSizePoster = tmdb.getUrlSizePoster(poster_path);\n      const urlW92 = urlSizePoster.find(obj => obj.name === 'w92');\n      const urlW154 = urlSizePoster.find(obj => obj.name === 'w154');\n      const urlW185 = urlSizePoster.find(obj => obj.name === 'w185');\n      const urlW342 = urlSizePoster.find(obj => obj.name === 'w342');\n      const urlW500 = urlSizePoster.find(obj => obj.name === 'w500');\n      const urlW780 = urlSizePoster.find(obj => obj.name === 'w780');\n      const urlOriginal = urlSizePoster.find(obj => obj.name === 'original');\n\n      const genres = tmdb.getGenres(genre_ids);\n      const year = release_date.split('-')[0];\n\n      return `<li>\n            <div class=\"card\" data-id=\"${id}\">\n              <div >\n                <img class=\"card-img\"\n                  alt=\"${title}\"\n                  src=\"${urlW154.url}\"\n                  srcset=\"\n                    ${urlW185.url} 185w,\n                    ${urlW342.url} 342w,\n                    ${urlW500.url} 500w,\n                    ${urlW780.url} 780w\n                     ${urlOriginal.url} 2000w\n                  \"\n                  sizes=\"(min-width: 1157px) 780px, (min-width: 768px) 500px, (max-width: 767px) 342px, 100vw\"\n                />\n              </div>\n              <div class=\"card-text\">\n                <p class=\"card-text-title\">${title}</p>\n                <p class=\"card-text-genre\">${genres} | ${year}</p>\n              </div>\n            </div>\n          </li>`;\n    })\n    .join('');\n  inputTotalPage.textContent = totalPages;\n  gallery.insertAdjacentHTML('beforeend', filmsList);\n}\n"],"names":["$bpxeT","parcelRequire","default","defaults","headers","common","$277ccfb263d9dd68$var$_getMostPopularMoviesTmdbApi","$parcel$interopDefault","$2TvXO","mark","_callee","currentPage","searchParams","url","response","URLSearchParams","language","page","concat","$dIxxU","get","_ctx","sent","console","log","data","apply","this","arguments","$277ccfb263d9dd68$var$_getTmdbConfiguration","$277ccfb263d9dd68$export$95c98a0345911bd6","posterPath","map","size","name","$9e0a88ff63ecd3c1$var$searchButton","document","querySelector","$9e0a88ff63ecd3c1$var$gallery","$9e0a88ff63ecd3c1$var$inputNumberPage","$9e0a88ff63ecd3c1$var$inputTotalPage","$9e0a88ff63ecd3c1$var$getMostPopularMovies","pageNumber","$277ccfb263d9dd68$export$565aa1d0ad6c1ce5","then","dataMovies","$277ccfb263d9dd68$export$9e617440724cfae9","catch","error","innerHTML","totalPages","total_pages","filmsList","results","param","id","title","poster_path","release_date","genre_ids","urlSizePoster","urlW154","find","obj","urlW185","urlW342","urlW500","urlW780","urlOriginal","genres","filter","genre","includes","join","$277ccfb263d9dd68$export$c5604fa8028da00","year","split","textContent","insertAdjacentHTML","$9e0a88ff63ecd3c1$var$renderMovies","value","addEventListener","event","ev"],"version":3,"file":"23-projectGrupowy.2854ed7d.js.map"}