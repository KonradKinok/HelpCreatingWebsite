{"mappings":"qeAAAA,EAAAC,EAAA,UAQAC,QAAMC,SAASC,QAAQC,OAAsB,cAF3C,6NA0CK,SAASC,EAAiBC,GAiB/B,MAfqB,CACnB,MACA,OACA,OACA,OACA,OACA,OACA,YAEqCC,KAAIC,IAClC,CACLC,KAAMD,EACNE,IAbQ,8BAaGF,EAAOF,K,sBCpDxBL,QAAMC,SAASC,QAAQC,OAAsB,cAF3C,6NAKF,MAAMO,EAAeC,SAASC,cAAc,wBACtCC,EAAUF,SAASC,cAAc,iBACjCE,EAAkBH,SAASC,cAAc,oBACzCG,EAAiBJ,SAASC,cAAc,qBAa9C,SAASI,EAAqBC,IDlBvBC,eAAoCC,GACzC,MAIMV,EAAM,mDAJS,IAAIW,gBAAgB,CACvCC,SAAU,QACVC,KAAMH,MAGFI,QAAiBzB,EAAAE,QAAMwB,IAAIf,GAEjC,OADAgB,QAAQC,IAAIjB,GACLc,EAASI,I,ECWhBC,CACwBX,GACrBY,MAAKC,KDVHZ,iBAGL,aADuBpB,EAAAE,QAAMwB,IADjB,+CAEIG,I,ECiBhBI,GAEGF,MAAKC,IAAA,IAGLE,OAAMC,IAELR,QAAQC,IAAIO,EAAM,IAiDxB,SAAsBH,GACpBjB,EAAQqB,UAAY,KACpB,MAAMC,EAAaL,EAAWM,YAExBC,EAAYP,EAAWQ,QAC1BhC,KAAI,EAACiC,GAAEA,EAAEC,MAAEA,EAAKC,YAAEA,EAAWC,aAAEA,EAAYC,UAAEA,MAE5C,MAAMC,EAAgBxC,EAAsBqC,GAEtCI,GADSD,EAAcE,MAAKC,GAAoB,QAAbA,EAAIvC,OAC7BoC,EAAcE,MAAKC,GAAoB,SAAbA,EAAIvC,QACxCwC,EAAUJ,EAAcE,MAAKC,GAAoB,SAAbA,EAAIvC,OACxCyC,EAAUL,EAAcE,MAAKC,GAAoB,SAAbA,EAAIvC,OACxC0C,EAAUN,EAAcE,MAAKC,GAAoB,SAAbA,EAAIvC,OACxC2C,EAAUP,EAAcE,MAAKC,GAAoB,SAAbA,EAAIvC,OACxC4C,EAAcR,EAAcE,MAAKC,GAAoB,aAAbA,EAAIvC,OAE5C6C,ED9CL,SAAmBV,GAoFxB,MAnFe,CACb,CACEJ,GAAI,GACJ/B,KAAM,UAER,CACE+B,GAAI,GACJ/B,KAAM,aAER,CACE+B,GAAI,GACJ/B,KAAM,aAER,CACE+B,GAAI,GACJ/B,KAAM,UAER,CACE+B,GAAI,GACJ/B,KAAM,SAER,CACE+B,GAAI,GACJ/B,KAAM,eAER,CACE+B,GAAI,GACJ/B,KAAM,SAER,CACE+B,GAAI,MACJ/B,KAAM,UAER,CACE+B,GAAI,GACJ/B,KAAM,WAER,CACE+B,GAAI,GACJ/B,KAAM,WAER,CACE+B,GAAI,GACJ/B,KAAM,UAER,CACE+B,GAAI,MACJ/B,KAAM,SAER,CACE+B,GAAI,KACJ/B,KAAM,WAER,CACE+B,GAAI,MACJ/B,KAAM,WAER,CACE+B,GAAI,IACJ/B,KAAM,mBAER,CACE+B,GAAI,MACJ/B,KAAM,YAER,CACE+B,GAAI,GACJ/B,KAAM,YAER,CACE+B,GAAI,MACJ/B,KAAM,OAER,CACE+B,GAAI,GACJ/B,KAAM,YAIP8C,QAAOC,GAASZ,EAAUa,SAASD,EAAMhB,MACzCjC,KAAIiD,GAASA,EAAM/C,OAEYiD,KAAK,K,CCrCpBC,CAAef,GACxBgB,EAAOjB,EAAakB,MAAM,KAAK,GAErC,MAAO,gDAC4BrB,4FAGhBC,8BACAK,EAAQpC,yDAEXuC,EAAQvC,kCACRwC,EAAQxC,kCACRyC,EAAQzC,kCACR0C,EAAQ1C,kCACP2C,EAAY3C,+QAMU+B,qDACAa,OAAYM,kEAGzC,IAEXF,KAAK,IACR1C,EAAe8C,YAAc1B,EAC7BtB,EAAQiD,mBAAmB,YAAazB,E,CA5GpC0B,CAAajC,EAAW,IAEzBE,OAAMC,IAELR,QAAQC,IAAIO,EAAM,G,CArBxBnB,EAAgBkD,MAAQ,EACxBlD,EAAgBmD,iBAAiB,UAAUC,IAEzClD,EADiBF,EAAgBkD,MACD,IAElCtD,EAAauD,iBAAiB,SAASE,IACrCrD,EAAgBkD,MAAQ,EACxB/C,WAAaH,EAAgBkD,MAC7BhD,EAAqBC,WAAW,IA2BrBb,EAAsB","sources":["src/scripts/23a.mjs","src/scripts/23.mjs"],"sourcesContent":["'use strict';\n//Import\nimport axios from 'axios';\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getMostPopularMovies(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  console.log(url);\n  return response.data;\n}\n\nexport async function getTmdbConfiguration() {\n  const url = `https://api.themoviedb.org/3/configuration`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n// async function getTmdbGenres() {\n//   const searchParams = new URLSearchParams({\n//     language: 'en-US',\n//   });\n//   const url = `https://api.themoviedb.org/3/genre/movie/list?${searchParams}`;\n//   const response = await axios.get(url);\n//   return response.data;\n// }\n\n// export function getGenres() {\n//   try {\n//     const TAB_GENRIES = getTmdbGenres();\n//     // console.log(genres);\n//     return TAB_GENRIES;\n//   } catch (error) {\n//     // Notify.failure(`${error}`, optionsNotify);\n//     console.log(error);\n//     throw error; // Rzucamy błąd, aby móc go obsłużyć dalej, jeśli to konieczne\n//   }\n// }\nexport function getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\nexport function getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n","'use strict';\n//Import\nimport * as mainMethods from './functions.mjs';\nimport * as tmdb from './23a.mjs';\nimport axios from 'axios';\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\n\n//DOM\nconst searchButton = document.querySelector('button#search-button');\nconst gallery = document.querySelector('ul#cards-list');\nconst inputNumberPage = document.querySelector('input#input-page');\nconst inputTotalPage = document.querySelector('label#label-pages');\ninputNumberPage.value = 1;\ninputNumberPage.addEventListener('change', event => {\n  let pageNumber = inputNumberPage.value;\n  getMostPopularMovies(pageNumber);\n});\nsearchButton.addEventListener('click', ev => {\n  inputNumberPage.value = 1;\n  pageNumber = inputNumberPage.value;\n  getMostPopularMovies(pageNumber);\n});\n\n//Functions\nfunction getMostPopularMovies(pageNumber) {\n  tmdb\n    .getMostPopularMovies(pageNumber)\n    .then(dataMovies => {\n      getTmdbConfiguration();\n      renderMovies(dataMovies);\n    })\n    .catch(error => {\n      //   Notify.failure(`${error}`, optionsNotify);\n      console.log(error);\n    });\n}\nfunction getTmdbConfiguration() {\n  tmdb\n    .getTmdbConfiguration()\n    .then(dataMovies => {\n      // console.log(dataMovies);\n    })\n    .catch(error => {\n      //   Notify.failure(`${error}`, optionsNotify);\n      console.log(error);\n    });\n}\nconst temp = tmdb.getUrlSizePoster('poster_path');\n// temp.\n// function renderMovies(dataMovies) {\n//   gallery.innerHTML = null;\n//   const filmsList = dataMovies.results\n//     .map(({ id, original_title, poster_path, release_date, genre_ids }) => {\n//       const urlSizePoster = tmdb.getUrlSizePoster(poster_path);\n//       const url = urlSizePoster.find(obj => obj.name === 'w500');\n//       const year = release_date.split('-')[0];\n//       const genres = tmdb.getGenres(genre_ids);\n\n//       const listItem = document.createElement('li');\n//       const divCard = document.createElement('div');\n//       divCard.classList.add('card');\n//       divCard.setAttribute('data-id', id);\n\n//       const divCardImg = document.createElement('div');\n//       divCardImg.classList.add('card-img');\n\n//       divCardImg.style.backgroundImage = `url(\"${url.url}\")`;\n\n//       const divCardText = document.createElement('div');\n//       divCardText.classList.add('card-text');\n\n//       const pCardTextTitle = document.createElement('p');\n//       pCardTextTitle.classList.add('card-text-title');\n//       pCardTextTitle.textContent = original_title;\n\n//       const pCardTextGenre = document.createElement('p');\n//       pCardTextGenre.classList.add('card-text-genre');\n//       pCardTextGenre.textContent = genres + ' | ' + year;\n\n//       divCardText.appendChild(pCardTextTitle);\n//       divCardText.appendChild(pCardTextGenre);\n\n//       divCard.appendChild(divCardImg);\n//       divCard.appendChild(divCardText);\n\n//       listItem.appendChild(divCard);\n//       gallery.appendChild(listItem);\n//     })\n//     .join('');\n\n//   gallery.insertAdjacentHTML('beforeend', filmsList);\n// }\n\nfunction renderMovies(dataMovies) {\n  gallery.innerHTML = null;\n  const totalPages = dataMovies.total_pages;\n\n  const filmsList = dataMovies.results\n    .map(({ id, title, poster_path, release_date, genre_ids }) => {\n      //Img\n      const urlSizePoster = tmdb.getUrlSizePoster(poster_path);\n      const urlW92 = urlSizePoster.find(obj => obj.name === 'w92');\n      const urlW154 = urlSizePoster.find(obj => obj.name === 'w154');\n      const urlW185 = urlSizePoster.find(obj => obj.name === 'w185');\n      const urlW342 = urlSizePoster.find(obj => obj.name === 'w342');\n      const urlW500 = urlSizePoster.find(obj => obj.name === 'w500');\n      const urlW780 = urlSizePoster.find(obj => obj.name === 'w780');\n      const urlOriginal = urlSizePoster.find(obj => obj.name === 'original');\n\n      const genres = tmdb.getGenres(genre_ids);\n      const year = release_date.split('-')[0];\n\n      return `<li>\n            <div class=\"card\" data-id=\"${id}\">\n              <div >\n                <img class=\"card-img\"\n                  alt=\"${title}\"\n                  src=\"${urlW154.url}\"\n                  srcset=\"\n                    ${urlW185.url} 185w,\n                    ${urlW342.url} 342w,\n                    ${urlW500.url} 500w,\n                    ${urlW780.url} 780w\n                     ${urlOriginal.url} 2000w\n                  \"\n                  sizes=\"(min-width: 1157px) 780px, (min-width: 768px) 500px, (max-width: 767px) 342px, 100vw\"\n                />\n              </div>\n              <div class=\"card-text\">\n                <p class=\"card-text-title\">${title}</p>\n                <p class=\"card-text-genre\">${genres} | ${year}</p>\n              </div>\n            </div>\n          </li>`;\n    })\n    .join('');\n  inputTotalPage.textContent = totalPages;\n  gallery.insertAdjacentHTML('beforeend', filmsList);\n}\n"],"names":["$2shzp","parcelRequire","default","defaults","headers","common","$3b8a0249197f5e1d$export$95c98a0345911bd6","posterPath","map","size","name","url","$8a7f79193043759c$var$searchButton","document","querySelector","$8a7f79193043759c$var$gallery","$8a7f79193043759c$var$inputNumberPage","$8a7f79193043759c$var$inputTotalPage","$8a7f79193043759c$var$getMostPopularMovies","pageNumber","async","currentPage","URLSearchParams","language","page","response","get","console","log","data","$3b8a0249197f5e1d$export$bfc6ce102e8c952a","then","dataMovies","$3b8a0249197f5e1d$export$9e617440724cfae9","catch","error","innerHTML","totalPages","total_pages","filmsList","results","id","title","poster_path","release_date","genre_ids","urlSizePoster","urlW154","find","obj","urlW185","urlW342","urlW500","urlW780","urlOriginal","genres","filter","genre","includes","join","$3b8a0249197f5e1d$export$c5604fa8028da00","year","split","textContent","insertAdjacentHTML","$8a7f79193043759c$var$renderMovies","value","addEventListener","event","ev"],"version":3,"file":"23-projectGrupowy.a4033870.js.map"}