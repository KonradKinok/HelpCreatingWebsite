{"mappings":"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","sources":["src/scripts/23.mjs","src/scripts/23a.mjs"],"sourcesContent":["'use strict';\n// import './sass/main.scss';\n\n//Import\nimport axios from 'axios';\nimport * as mainMethods from './23a.mjs';\n// -------------KonradKonik\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\nlet pageNumber = 1;\n\n//DOM\nconst homeButton = document.querySelector('span#logo');\nconst gallery = document.querySelector('ul#cards-list');\n\n//Listeners\nhomeButton.addEventListener('click', ev => {\n  ev.preventDefault();\n  pageNumber = 1;\n  getMostPopularMovies(pageNumber);\n});\n\n//Functions\n/**\n *getMostPopularMoviesTmdbApi\n ** Pobiera dane o najpopularniejszych filmach z API TMDb.\n * @param {number} currentPage Numer bieżącej strony do pobrania.\n * @returns {Promise<any>} Dane o najpopularniejszych filmach.\n */\nasync function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n/**\n * getMostPopularMovies\n ** Pobiera dane o najpopularniejszych filmach z określonej strony i renderuje je na stronie.\n * @param {number} pageNumber - Numer strony do pobrania danych o najpopularniejszych filmach.\n * @returns {void}\n */\nfunction getMostPopularMovies(pageNumber) {\n  getMostPopularMoviesTmdbApi(pageNumber)\n    .then(dataMovies => {\n      renderMovies(dataMovies);\n    })\n    .catch(error => {\n      console.error(error);\n    });\n}\n\n/**\n *renderMovies\n ** Renderuje filmy na stronie internetowej na podstawie danych o filmach.\n * @param {object} dataMovies - Obiekt zawierający dane o filmach.\n * @param {number} dataMovies.total_pages - Całkowita liczba stron filmów.\n * @param {Array} dataMovies.results - Tablica obiektów zawierających dane o pojedynczych filmach.\n * @param {number} dataMovies.results[].id - Identyfikator filmu.\n * @param {string} dataMovies.results[].title - Tytuł filmu.\n * @param {string} dataMovies.results[].poster_path - Ścieżka do pliku z obrazem plakatu filmowego.\n * @param {string} dataMovies.results[].release_date - Data premiery filmu.\n * @param {Array} dataMovies.results[].genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {void}\n */\nfunction renderMovies(dataMovies) {\n  gallery.innerHTML = null;\n  const totalPages = dataMovies.total_pages;\n\n  const filmsList = dataMovies.results\n    .map(({ id, title, poster_path, release_date, genre_ids }) => {\n      //Img\n      const urlSizePoster = getUrlSizePoster(poster_path);\n      const urlW92 = urlSizePoster.find(obj => obj.name === 'w92');\n      const urlW154 = urlSizePoster.find(obj => obj.name === 'w154');\n      const urlW185 = urlSizePoster.find(obj => obj.name === 'w185');\n      const urlW342 = urlSizePoster.find(obj => obj.name === 'w342');\n      const urlW500 = urlSizePoster.find(obj => obj.name === 'w500');\n      const urlW780 = urlSizePoster.find(obj => obj.name === 'w780');\n      const urlOriginal = urlSizePoster.find(obj => obj.name === 'original');\n\n      const genres = getGenres(genre_ids);\n      const year = release_date.split('-')[0];\n\n      return `<li>\n            <div class=\"card\" data-id=\"${id}\">\n              <div >\n                <img class=\"card-img\"\n                  alt=\"${title}\"\n                  src=\"${urlW154.url}\"\n                  srcset=\"\n                    ${urlW185.url} 185w,\n                    ${urlW342.url} 342w,\n                    ${urlW500.url} 500w,\n                    ${urlW780.url} 780w\n                     ${urlOriginal.url} 2000w\n                  \"\n                  sizes=\"(min-width: 1157px) 780px, (min-width: 768px) 500px, (max-width: 767px) 342px, 100vw\"\n                />\n              </div>\n              <div class=\"card-text\">\n                <p class=\"card-text-title\">${title}</p>\n                <p class=\"card-text-genre\">${genres} | ${year}</p>\n              </div>\n            </div>\n          </li>`;\n    })\n    .join('');\n\n  let kontrolkaDoPaginacji = 0; //nazwaKontrolkiDoPaginacji\n  kontrolkaDoPaginacji = totalPages;\n  gallery.insertAdjacentHTML('beforeend', filmsList);\n}\n\n/**\n *getUrlSizePoster\n ** Generuje listę obiektów zawierających URL różnych rozmiarów obrazka.\n * @param {string} posterPath Endpoint ścieżki do pliku obrazka\n * @returns {Object[]} Tablica obiektów zawierających nazwę i URL różnych rozmiarów obrazka.\n */\nfunction getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\n/**\n *getGenres\n ** Zwraca nazwy gatunków filmowych na podstawie ich identyfikatorów.\n * @param {number[]} genre_ids - Tablica identyfikatorów gatunków filmowych.\n * @returns {string} Nazwy gatunków filmowych, oddzielone przecinkami.\n */\nfunction getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n// -------------KonradKonik End\n\n// MartaMajnusz - wyszukiwarka (F10)\n// import {\n//   searchMovies,\n//   fetchGenresList,\n//   createCards,\n// } from './scripts/search.js';\n\n// const search = document.querySelector('.search-form');\n// const cardsList = document.querySelector('ul#cards-list');\n// let lastSearchTerm;\n\n// search.addEventListener('submit', async ev => {\n//   ev.preventDefault();\n//   cardsList.innerHTML = ` `;\n//   const warning = document.querySelector(`p.warning`);\n//   const searchTerm = ev.currentTarget.elements.searchQuery.value;\n//   lastSearchTerm = searchTerm;\n\n//   try {\n//     const data = await searchMovies(lastSearchTerm);\n//     const dataMovies = data.results;\n//     const genresList = await fetchGenresList();\n\n//     if (searchTerm === lastSearchTerm) {\n//       if (data.results.length === 0) {\n//         console.log(`Nie znaleziono filmów`);\n//         warning.innerText = `Search result not successful. Enter the correct movie name and`;\n//       } else {\n//         createCards(dataMovies, genresList);\n//       }\n//     }\n//   } catch (error) {\n//     console.error('Wystąpił błąd:', error);\n//   }\n// });\n\n// Marta - koniec\n","'use strict';\n//Import\nimport axios from 'axios';\n\n//ApiKey\nconst apiKey = '6bb894494c1a707618648b9164f393c2';\nconst AXIOS_AUTHORIZATION =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2YmI4OTQ0OTRjMWE3MDc2MTg2NDhiOTE2NGYzOTNjMiIsInN1YiI6IjVlZDdiZmY3ZTRiNTc2MDAyMDM3NjYzZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.kRGs0WRoomKwYXT7Mt8PNU2Zk6kAVasud5CyVVdf2mA';\n//Axios header - api key\naxios.defaults.headers.common['Authorization'] = AXIOS_AUTHORIZATION;\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getMostPopularMoviesTmdbApi(currentPage) {\n  const searchParams = new URLSearchParams({\n    language: 'en-US',\n    page: currentPage,\n  });\n  const url = `https://api.themoviedb.org/3/trending/movie/day?${searchParams}`;\n  const response = await axios.get(url);\n  console.log(url);\n  return response.data;\n}\n\nexport async function getTmdbConfiguration() {\n  const url = `https://api.themoviedb.org/3/configuration`;\n  const response = await axios.get(url);\n  return response.data;\n}\n\n// async function getTmdbGenres() {\n//   const searchParams = new URLSearchParams({\n//     language: 'en-US',\n//   });\n//   const url = `https://api.themoviedb.org/3/genre/movie/list?${searchParams}`;\n//   const response = await axios.get(url);\n//   return response.data;\n// }\n\n// export function getGenres() {\n//   try {\n//     const TAB_GENRIES = getTmdbGenres();\n//     // console.log(genres);\n//     return TAB_GENRIES;\n//   } catch (error) {\n//     // Notify.failure(`${error}`, optionsNotify);\n//     console.log(error);\n//     throw error; // Rzucamy błąd, aby móc go obsłużyć dalej, jeśli to konieczne\n//   }\n// }\nexport function getUrlSizePoster(posterPath) {\n  const url = 'https://image.tmdb.org/t/p/';\n  const poster_sizes = [\n    'w92',\n    'w154',\n    'w185',\n    'w342',\n    'w500',\n    'w780',\n    'original',\n  ];\n  const postersUrlsObject = poster_sizes.map(size => {\n    return {\n      name: size,\n      url: url + size + posterPath,\n    };\n  });\n  return postersUrlsObject;\n}\n\nexport function getGenres(genre_ids) {\n  const genres = [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];\n  const matchingGenres = genres\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(genre => genre.name);\n\n  const genreNames = matchingGenres.join(', ');\n  return genreNames;\n}\n"],"names":["$bpxeT","parcelRequire","default","defaults","headers","common","$dIxxU","$9e0a88ff63ecd3c1$var$homeButton","document","querySelector","$9e0a88ff63ecd3c1$var$gallery","$9e0a88ff63ecd3c1$var$_getMostPopularMoviesTmdbApi","$parcel$interopDefault","$2TvXO","mark","_callee","currentPage","searchParams","url","response","URLSearchParams","language","page","concat","get","_ctx","sent","data","apply","this","arguments","addEventListener","ev","preventDefault","$9e0a88ff63ecd3c1$var$getMostPopularMoviesTmdbApi","then","dataMovies","innerHTML","total_pages","filmsList","results","map","param","posterPath","id","title","poster_path","release_date","genre_ids","urlSizePoster","size","name","urlW154","find","obj","urlW185","urlW342","urlW500","urlW780","urlOriginal","genres","filter","genre","includes","join","$9e0a88ff63ecd3c1$var$getGenres","year","split","insertAdjacentHTML","$9e0a88ff63ecd3c1$var$renderMovies","catch","error","console"],"version":3,"file":"23-projectGrupowy.8f38b2d2.js.map"}